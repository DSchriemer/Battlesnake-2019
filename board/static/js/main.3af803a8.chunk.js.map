{"version":3,"sources":["utils/game-state.js","utils/url.js","components/blank-state.jsx","theme/index.js","components/grid.jsx","components/board.jsx","io/websocket.js","utils/inline-svg.js","utils/engine-client.js","components/avatar.jsx","components/scoreboard.jsx","components/mediaControls.jsx","components/game.jsx","actions/index.js","containers/app.jsx","index.js","reducers/index.js"],"names":["DEFAULT_HEAD_DIRECTION","formatFrame","frame","Turn","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Snakes","Symbol","iterator","next","done","snake","value","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","Body","part","X","Y","err","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","Food","food","cleanFrame","positions","snakes","map","formatSnake","formatSnakes","turn","formatPosition","gameOver","isLastFrameOfGame","body","p","i","partIndex","direction","getDirection","headDirection","shouldRender","isCovered","type","getType","x","y","formatSnakePart","color","Color","_id","ID","name","Name","health","Health","isDead","Death","death","formatDeath","head","Head","tail","Tail","headSvg","HeadSvg","tailSvg","TailSvg","cause","Cause","length","pos","a","b","filter","s","oneLeft","parseArg","parts","split","key","decodeURIComponent","makeQueryString","query","sep","result","concat","httpToWsProtocol","url","mappings","http","https","from","to","substr","Error","join","_len","arguments","Array","_key","reduce","current","cleanA","replace","cleanB","joinPair","BlankState","react_default","createElement","window","location","origin","React","Component","colors","HIGHLIGHT_DIM","DEAD_OPACITY","CELL_SIZE","CELL_SPACING","toGridSpace","slot","getPartWidth","extraWidth","getPartHeight","extraHeight","getPartXOffset","xBias","getPartYOffset","yBias","getOpacity","highlightedSnake","range","size","push","Grid","snakeIndex","this","renderHeadPart","renderTailPart","renderMiddlePart","highlighted","getHeadXOffset","getHeadYOffset","box","viewBox","baseVal","transform","halfX","width","halfY","height","getHeadTransform","viewBoxStr","fill","opacity","shapeRendering","dangerouslySetInnerHTML","__html","innerHTML","getTailXOffset","getTailYOffset","getTailTransform","_this","unsortedSnakes","props","sortedSnakes","sort","viewBoxWidth","columns","viewBoxHeight","rows","maxWidth","maxHeight","_","row","col","renderPart","f","foodIndex","cx","cy","r","renderGrid","Board","grid","streamAll","receive","Promise","resolve","reject","ws","WebSocket","addEventListener","e","obj","JSON","parse","data","close","loaded","getSvg","path","requireSvg","fetchSvg","_callee","response","svgText","svg","regenerator_default","wrap","_context","prev","fetch","sent","text","makeDom","abrupt","stop","wrapper","document","trim","firstChild","SNAKE_MIN_DELAY_MILLIS","DEFAULT_SNAKE_HEAD","DEFAULT_SNAKE_TAIL","fetchResult","json","delay","millis","setTimeout","getAllSvgs","all","unique","Set","assignHeadAndTailUrls","getSnakeHeadSvgUrl","getSnakeTailSvgUrl","setHeadAndTailSvgs","_callee2","_context2","paths","t0","finish","isIllegalSvgPath","nameOrPath","indexOf","svgUrlFromName","base","relative","prepareFrame","_callee3","_context3","getGameInfo","baseUrl","gameId","get","streamAllFrames","_x5","_x6","_x7","_streamAllFrames","apply","_callee5","receiveFrame","game","chain","onFrame","wsUrl","_context5","then","Object","asyncToGenerator","mark","_callee4","_context4","getFrameByTurn","frames","AvatarWrapper","styled","marginBottom","padding","display","paddingBottom","fontSize","fontWeight","HealthBarOutline","position","borderStyle","borderWidth","borderColor","HealthBar","_ref","backgroundColor","CauseOfDeath","Avatar","getReadableCauseOfDeath","getCauseOfDeathMessage","style","_templateObject","TurnCount","borderBottom","Scoreboard","state","toggleHighlight","getSnakeToHighlight","highlightSnake","setState","_this2","Fragment","scoreboard_AvatarWrapper","onClick","avatar","q","MediaControlsWrapper","justifyContent","Button","mediaControls_templateObject","MediaControls","handlePlayPause","toggleGamePause","handleBackward","stepBackwardFrame","handleForward","stepForwardFrame","handleKeyEvent","renderControls","paused","disabled","react_keyboard_event_handler_default","handleKeys","onKeyEvent","GameBoardWrapper","BoardWrapper","flexDirection","ScoreboardWrapper","marginLeft","Game","autoplay","options","engine","fetchFrames","invalidArgs","blank_state","currentFrame","renderGame","board","mediaControls","hideScoreboard","scoreboard","setCurrentFrame","playFromFrame","_ref2","dispatch","getState","frameIndex","slicedFrames","_frame2","lastFrame","slice","_x3","_x4","search","arg","connect","_x","_x2","_ref3","_ref4","_getState","stepToFrame","_x8","_ref5","_getState2","_x9","_x10","snakeId","middleware","applyMiddleware","thunkMiddleware","store","createStore","action","objectSpread","Height","Width","toConsumableArray","render","es","app","getElementById"],"mappings":"gMAAMA,EAAyB,KAExB,SAASC,EAAYC,IAuG5B,SAAoBA,GAClBA,EAAMC,KAAOD,EAAMC,MAAQ,EADF,IAAAC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAGzB,QAAAC,EAAAC,EAAoBP,EAAMQ,OAA1BC,OAAAC,cAAAR,GAAAI,EAAAC,EAAAI,QAAAC,MAAAV,GAAA,EAAkC,KAAvBW,EAAuBP,EAAAQ,MAAAC,GAAA,EAAAC,GAAA,EAAAC,OAAAZ,EAAA,IAChC,QAAAa,EAAAC,EAAmBN,EAAMO,KAAzBX,OAAAC,cAAAK,GAAAG,EAAAC,EAAAR,QAAAC,MAAAG,GAAA,EAA+B,KAApBM,EAAoBH,EAAAJ,MAC7BO,EAAKC,EAAID,EAAKC,GAAK,EACnBD,EAAKE,EAAIF,EAAKE,GAAK,GAHW,MAAAC,GAAAR,GAAA,EAAAC,EAAAO,EAAA,YAAAT,GAAA,MAAAI,EAAAM,QAAAN,EAAAM,SAAA,WAAAT,EAAA,MAAAC,KAHT,MAAAO,GAAArB,GAAA,EAAAC,EAAAoB,EAAA,YAAAtB,GAAA,MAAAK,EAAAkB,QAAAlB,EAAAkB,SAAA,WAAAtB,EAAA,MAAAC,GAAA,IAAAsB,GAAA,EAAAC,GAAA,EAAAC,OAAAvB,EAAA,IAUzB,QAAAwB,EAAAC,EAAmB9B,EAAM+B,KAAzBtB,OAAAC,cAAAgB,GAAAG,EAAAC,EAAAnB,QAAAC,MAAAc,GAAA,EAA+B,KAApBM,EAAoBH,EAAAf,MAC7BkB,EAAKV,EAAIU,EAAKV,GAAK,EACnBU,EAAKT,EAAIS,EAAKT,GAAK,GAZI,MAAAC,GAAAG,GAAA,EAAAC,EAAAJ,EAAA,YAAAE,GAAA,MAAAI,EAAAL,QAAAK,EAAAL,SAAA,WAAAE,EAAA,MAAAC,IAtGzBK,CAAWjC,GACX,IAiEuBkC,EAjEjBC,EASR,SAAsBA,GACpB,OAAOA,EAAOC,IAAIC,GAVHC,CAAatC,EAAMQ,QAClC,MAAO,CACL+B,KAAMvC,EAAMC,KACZkC,OAAQA,EACRH,MA6DqBE,EA7DClC,EAAM+B,KA8DvBG,EAAUE,IAAII,IA7DnBC,SAAUC,EAAkBP,IAQhC,SAASE,EAAYxB,GACnB,MAAO,CACL8B,KAAM9B,EAAMO,KAAKgB,IAAI,SAACQ,EAAGC,GAAJ,OAsCzB,SAAyBhC,EAAOiC,GAC9B,IAAMzB,EAAOR,EAAMO,KAAK0B,GAClBnC,EAAOE,EAAMO,KAAK0B,EAAY,GACpC,MAAO,CACLC,UAAWpC,EAAOqC,EAAa3B,EAAMV,GAAQsC,EAAcpC,GAC3DqC,cAAeC,EAAUtC,EAAOiC,GAChCM,KAAMC,EAAQxC,EAAOiC,GACrBQ,EAAGjC,EAAKC,EACRiC,EAAGlC,EAAKE,GA9CuBiC,CAAgB3C,EAAOgC,KACtDY,MAAO5C,EAAM6C,MACbC,IAAK9C,EAAM+C,GACXC,KAAMhD,EAAMiD,KACZC,OAAQlD,EAAMmD,OACdC,SAAUpD,EAAMqD,MAChBC,MAAOC,EAAYvD,EAAMqD,OACzBG,KAAMxD,EAAMyD,KACZC,KAAM1D,EAAM2D,KACZC,QAAS5D,EAAM6D,QACfC,QAAS9D,EAAM+D,SAInB,SAASR,EAAYD,GACnB,GAAKA,EAIL,MAAO,CACLU,MAAOV,EAAMW,MACbvC,KAAM4B,EAAMlE,MAAQ,GAIxB,SAASgD,EAAcpC,GACrB,OAAOA,EAAMO,KAAK2D,OAAS,EACvB/B,EAAanC,EAAMO,KAAK,GAAIP,EAAMO,KAAK,IACvCtB,EAGN,SAASqD,EAAUtC,EAAOiC,GACxB,IAAMzB,EAAOR,EAAMO,KAAK0B,GAClBnC,EAAOE,EAAMO,KAAK0B,EAAY,GAEpC,OAAOnC,GAAQA,EAAKW,IAAMD,EAAKC,GAAKX,EAAKY,IAAMF,EAAKE,EAmBtD,SAASiB,EAAewC,GACtB,MAAO,CACL1B,EAAG0B,EAAI1D,EACPiC,EAAGyB,EAAIzD,GAIX,SAASyB,EAAaiC,EAAGC,GACvB,OAAID,EAAE3D,EAAI4D,EAAE5D,EACH,QACE4D,EAAE5D,EAAI2D,EAAE3D,EACV,OACE2D,EAAE1D,EAAI2D,EAAE3D,EACV,OAEF,KAGT,SAAS8B,EAAQxC,EAAOiC,GACtB,OAAkB,IAAdA,EACK,OAGLA,IAAcjC,EAAMO,KAAK2D,OAAS,EAC7B,OAGF,OA0BF,SAASrC,EAAkBP,GAChC,OAAsB,IAAlBA,EAAO4C,SAIW,IAAlB5C,EAAO4C,SACA5C,EAAO,GAAGgC,MAXvB,SAAiBhC,GAEf,OADcA,EAAOgD,OAAO,SAAAC,GAAC,OAAKA,EAAEjB,QACvBY,QAAU,EAYhBM,CAAQlD,IChHjB,SAASmD,EAASL,GAChB,IAAMM,EAAQN,EAAEO,MAAM,KAGtB,MAAO,CAAEC,IAFGF,EAAM,GAEJzE,WADaT,IAAbkF,EAAM,IAA0BG,mBAAmBH,EAAM,KAKlE,SAASI,EAAgBC,GAC9B,IAAKA,EACH,MAAO,GAGT,IAAIC,EAAM,IACNC,EAAS,GAEb,IAAK,IAAML,KAAOG,EAAO,CACvB,IAAM9E,EAAQ8E,EAAMH,GACpBK,GAAM,GAAAC,OAAOF,GAAPE,OAAaN,EAAb,KAAAM,OAAoBjF,GAC1B+E,EAAM,IAGR,OAAOC,EAIF,SAASE,EAAiBC,GAC/B,IAAMC,EAAW,CACfC,KAAM,KACNC,MAAO,OAGT,IAAK,IAAMC,KAAQH,EAAU,CAC3B,IAAMI,EAAKJ,EAASG,GACpB,GAAIJ,EAAIM,OAAO,EAAGF,EAAKtB,OAAS,KAAOsB,EAAO,IAC5C,OAAOC,EAAKL,EAAIM,OAAOF,EAAKtB,QAIhC,MAAM,IAAIyB,MAAM,gBAAkBP,GAK7B,SAASQ,IAAe,QAAAC,EAAAC,UAAA5B,OAAPQ,EAAO,IAAAqB,MAAAF,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAPtB,EAAOsB,GAAAF,UAAAE,GAgB7B,OAAOtB,EAAMuB,OAAO,SAACC,EAASpG,GAAV,OAfpB,SAAkBsE,EAAGC,GACnB,IAAM8B,EAAS/B,EAAEgC,QAAQ,OAAQ,IAC3BC,EAAShC,EAAE+B,QAAQ,OAAQ,IAEjC,MAAe,KAAXD,EACKE,EAGM,KAAXA,EACKF,EAGT,GAAAjB,OAAUiB,EAAV,KAAAjB,OAAoBmB,GAGiBC,CAASJ,EAASpG,IAAO,kDCnEnDyG,mLAZX,OACEC,EAAApC,EAAAqC,cAAA,mGAGED,EAAApC,EAAAqC,cAAA,WACGC,OAAOC,SAASC,OADnB,+CANiBC,IAAMC,WCFlBC,EACK,OADLA,EAEK,OAFLA,EAGK,UAHLA,EAIe,OAJfA,EAKL,SALKA,EAOO,OAPPA,EASD,OATCA,EAYJ,OCTHC,EAAgB,IAChBC,EAAe,IACfC,EAAY,GACZC,EAAe,EAErB,SAASC,EAAYC,GACnB,OAAQH,EAAYC,GAAgBE,EAAOF,EAG7C,SAASG,EAAa9G,GACpB,IAAM+G,EACe,SAAnB/G,EAAK0B,WAA2C,UAAnB1B,EAAK0B,UAAwBiF,EAAe,EAC3E,OAAOD,EAAYK,EAAa,KAGlC,SAASC,EAAchH,GACrB,IAAMiH,EACe,OAAnBjH,EAAK0B,WAAyC,SAAnB1B,EAAK0B,UAAuBiF,EAAe,EACxE,OAAOD,EAAYO,EAAc,KAGnC,SAASC,EAAelH,GACtB,IAAMmH,EAA2B,SAAnBnH,EAAK0B,WAAwBiF,EAAe,EAC1D,OAAOC,EAAY5G,EAAKiC,GAAKkF,EAG/B,SAASC,EAAepH,GACtB,IAAMqH,EAA2B,OAAnBrH,EAAK0B,WAAsBiF,EAAe,EACxD,OAAOC,EAAY5G,EAAKkC,GAAKmF,EA+C/B,SAASC,EAAW9H,EAAO+H,GACzB,OAAIA,EACK/H,EAAM8C,MAAQiF,EAAmB,EAAIf,EAGvChH,EAAMoD,OAAS6D,EAAe,EAGvC,SAASe,EAAMC,GAEb,IADA,IAAMhD,EAAS,GACNjD,EAAI,EAAGA,EAAIiG,EAAMjG,IACxBiD,EAAOiD,KAAKlG,GAEd,OAAOiD,MA+NMkD,qLArLFnI,EAAOoI,EAAY5H,EAAMyB,EAAW8F,GAC7C,OAAQvH,EAAK+B,MACX,IAAK,OACH,OAAO8F,KAAKC,eAAetI,EAAOoI,EAAY5H,EAAMuH,GACtD,IAAK,OACH,OAAOM,KAAKE,eAAevI,EAAOoI,EAAY5H,EAAMuH,GACtD,QACE,OAAOM,KAAKG,iBACVxI,EACAoI,EACA5H,EACAyB,EACA8F,2CAKO/H,EAAOoI,EAAY5H,EAAMiI,GACtC,IAAMhG,EA/FV,SAAwBjC,GACtB,OAAQA,EAAK0B,WACX,IAAK,OAEL,IAAK,QAEL,QACE,OAAOkF,EAAY5G,EAAKiC,IAwFhBiG,CAAelI,GACnBkC,EArFV,SAAwBlC,GACtB,OAAQA,EAAK0B,WACX,IAAK,KAEL,IAAK,OAEL,QACE,OAAOkF,EAAY5G,EAAKkC,IA8EhBiG,CAAenI,GACnBoI,EAAM5I,EAAM4D,QAAQiF,QAAQC,QAC5BC,EApDV,SAA0B7G,EAAW2G,GACnC,IAAMG,EAAQH,EAAQI,MAAQ,EACxBC,EAAQL,EAAQM,OAAS,EAC/B,OAAQjH,GACN,IAAK,OACH,oBAAAgD,OAAqB8D,EAArB,KAAA9D,OAA8BgE,EAA9B,KACF,IAAK,KACH,oBAAAhE,OAAqB8D,EAArB,KAAA9D,OAA8BgE,EAA9B,KACF,IAAK,OACH,mBAAAhE,OAAoB8D,EAApB,KAAA9D,OAA6BgE,EAA7B,KACF,QACE,MAAO,IAyCSE,CAAiB5I,EAAK0B,UAAW0G,GAC7CS,EAAU,GAAAnE,OAAM0D,EAAInG,EAAV,KAAAyC,OAAe0D,EAAIlG,EAAnB,KAAAwC,OAAwB0D,EAAIK,MAA5B,KAAA/D,OAAqC0D,EAAIO,QAEzD,OACE3C,EAAApC,EAAAqC,cAAA,OACE7B,IAAK,OAASwD,EAAa,QAC3BkB,KAAMtJ,EAAM4C,MACZqG,MAAO/B,EAAY,KACnBiC,OAAQjC,EAAY,KACpBzE,EAAGA,EACHC,EAAGA,EACHmG,QAASQ,EACTE,QAASzB,EAAW9H,EAAOyI,GAC3Be,eAAe,iBAEfhD,EAAApC,EAAAqC,cAAA,KACEsC,UAAWA,EACXU,wBAAyB,CAAEC,OAAQ1J,EAAM4D,QAAQ+F,uDAMxC3J,EAAOoI,EAAY5H,EAAMyB,EAAWwG,GACnD,OAAKjI,EAAK6B,aAURmE,EAAApC,EAAAqC,cAAA,QACE7B,IAAG,OAAAM,OAASkD,EAAT,KAAAlD,OAAuB1E,EAAKiC,EAA5B,KAAAyC,OAAiC1E,EAAKkC,GACzCD,EAAGiF,EAAelH,GAClBkC,EAAGkF,EAAepH,GAClByI,MAAO3B,EAAa9G,GACpB2I,OAAQ3B,EAAchH,GACtB+I,QAASzB,EAAW9H,EAAOyI,GAC3Ba,KAAMtJ,EAAM4C,MACZ4G,eAAe,kBAhBfhD,EAAApC,EAAAqC,cAAA,OACE7B,IAAK,OAASwD,EAAa,IAAMnG,EACjCuH,eAAe,yDAmBRxJ,EAAOoI,EAAY5H,EAAMiI,GACtC,IAAMhG,EAxKV,SAAwBjC,GACtB,OAAQA,EAAK0B,WACX,IAAK,OACH,OAAOkF,EAAY5G,EAAKiC,GAAK0E,EAC/B,IAAK,QACH,OAAOC,EAAY5G,EAAKiC,GAAK0E,EAC/B,QACE,OAAOC,EAAY5G,EAAKiC,IAiKhBmH,CAAepJ,GACnBkC,EA9JV,SAAwBlC,GACtB,OAAQA,EAAK0B,WACX,IAAK,KACH,OAAOkF,EAAY5G,EAAKkC,GAAKyE,EAC/B,IAAK,OACH,OAAOC,EAAY5G,EAAKkC,GAAKyE,EAC/B,QACE,OAAOC,EAAY5G,EAAKkC,IAuJhBmH,CAAerJ,GACnBoI,EAAM5I,EAAM8D,QAAQ+E,QAAQC,QAC5BC,EAxFV,SAA0B7G,EAAW2G,GACnC,IAAMG,EAAQH,EAAQI,MAAQ,EACxBC,EAAQL,EAAQM,OAAS,EAC/B,OAAQjH,GACN,IAAK,QACH,oBAAAgD,OAAqB8D,EAArB,KAAA9D,OAA8BgE,EAA9B,KACF,IAAK,OACH,oBAAAhE,OAAqB8D,EAArB,KAAA9D,OAA8BgE,EAA9B,KACF,IAAK,KACH,mBAAAhE,OAAoB8D,EAApB,KAAA9D,OAA6BgE,EAA7B,KACF,QACE,MAAO,IA6ESY,CAAiBtJ,EAAK0B,UAAW0G,GAC7CS,EAAU,GAAAnE,OAAM0D,EAAInG,EAAV,KAAAyC,OAAe0D,EAAIlG,EAAnB,KAAAwC,OAAwB0D,EAAIK,MAA5B,KAAA/D,OAAqC0D,EAAIO,QAEzD,OAAK3I,EAAK6B,aAURmE,EAAApC,EAAAqC,cAAA,OACE7B,IAAK,OAASwD,EAAa,QAC3BkB,KAAMtJ,EAAM4C,MACZqG,MAAO/B,EACPiC,OAAQjC,EACRzE,EAAGA,EACHC,EAAGA,EACHmG,QAASQ,EACTE,QAASzB,EAAW9H,EAAOyI,GAC3Be,eAAe,iBAEfhD,EAAApC,EAAAqC,cAAA,KACEsC,UAAWA,EACXU,wBAAyB,CAAEC,OAAQ1J,EAAM8D,QAAQ6F,cArBnDnD,EAAApC,EAAAqC,cAAA,OACE7B,IAAK,OAASwD,EAAa,QAC3BoB,eAAe,uDAyBV,IAAAO,EAAA1B,KACL2B,EAAiB3B,KAAK4B,MAAM3I,QAAU,GACtCH,EAAOkH,KAAK4B,MAAM9I,MAAQ,GAG1B+I,EAAoCF,EAnJ9B9E,SAASiF,KAAK,SAAC/F,EAAGC,GAG9B,OAFeD,EAAEhB,OAAS,EAAI,IACfiB,EAAEjB,OAAS,EAAI,KAmJxBgH,EAAehD,EAAYiB,KAAK4B,MAAMI,SACtCC,EAAgBlD,EAAYiB,KAAK4B,MAAMM,MAE7C,OACE/D,EAAApC,EAAAqC,cAAA,OACEwC,MAAOZ,KAAK4B,MAAMO,SAClBrB,OAAQd,KAAK4B,MAAMQ,UACnBhI,EAAG4F,KAAK4B,MAAMxH,EACdC,EAAG2F,KAAK4B,MAAMvH,EACdmG,QAAO,OAAA3D,OAASkF,EAAT,KAAAlF,OAAyBoF,IAEhC9D,EAAApC,EAAAqC,cAAA,QACEwC,MAAOmB,EACPjB,OAAQmB,EACRhB,KAAMvC,EACNwC,QAASlB,KAAK4B,MAAMlC,iBAAmBf,EAAgB,KACvDwC,eAAe,kBAGhBxB,EAAMK,KAAK4B,MAAMM,MAAMhJ,IAAI,SAACmJ,EAAGC,GAAJ,OAC1B3C,EAAM+B,EAAKE,MAAMI,SAAS9I,IAAI,SAACmJ,EAAGE,GAAJ,OAC5BpE,EAAApC,EAAAqC,cAAA,QACE7B,IAAK,OAAS+F,EAAM,IAAMC,EAC1BnI,EAAG2E,EAAYwD,GACflI,EAAG0E,EAAYuD,GACf1B,MAAO/B,EACPiC,OAAQjC,EACRoC,KAAMvC,EACNwC,QAASQ,EAAKE,MAAMlC,iBAAmBf,EAAgB,KACvDwC,eAAe,sBAKpBU,EAAa3I,IAAI,SAACvB,EAAOoI,GACxB,OAAOpI,EAAM8B,KAAKP,IAAI,SAACf,EAAMyB,GAAP,OACpB8H,EAAKc,WACH7K,EACAoI,EACA5H,EACAyB,EACA8H,EAAKE,MAAMlC,sBAKhB5G,EAAKI,IAAI,SAACuJ,EAAGC,GAAJ,OACRvE,EAAApC,EAAAqC,cAAA,UACE7B,IAAK,OAASmG,EACdC,GAAI5D,EAAY0D,EAAErI,GAAKyE,EAAY,EACnC+D,GAAI7D,EAAY0D,EAAEpI,GAAKwE,EAAY,EACnCgE,EAAGhE,EAAY,EACfoC,KAAMvC,EACNwC,QAASQ,EAAKE,MAAMlC,iBAAmBf,EAAgB,KACvDwC,eAAe,wDAQvB,OAAInB,KAAK4B,MAAM3I,OACN+G,KAAK8C,kBAEZ,SAjLatE,IAAMC,WC1GVsE,mLApBX,OACE5E,EAAApC,EAAAqC,cAAA,OAAKoC,QAAQ,aACXrC,EAAApC,EAAAqC,cAAA,QAAMhE,EAAE,IAAIC,EAAE,IAAIuG,MAAM,KAAKE,OAAO,KAAKG,KAAMvC,IAE/CP,EAAApC,EAAAqC,cAAC4E,EAAD,CACE/J,OAAQ+G,KAAK4B,MAAM3I,OACnBH,KAAMkH,KAAK4B,MAAM9I,KACjBkJ,QAAShC,KAAK4B,MAAMI,QACpBE,KAAMlC,KAAK4B,MAAMM,KACjBxC,iBAAkBM,KAAK4B,MAAMlC,iBAC7ByC,SAAU,GACVC,UAAW,GACXhI,EAAG,EACHC,EAAG,YAfOmE,IAAMC,4CCDnB,SAASwE,GAAUlG,EAAKmG,GAC7B,IAAIxL,GAAO,EAEX,OAAO,IAAIyL,QAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAK,IAAIC,UAAUxG,GACzBuG,EAAGE,iBAAiB,UAAW,SAAAC,GAC7B,IAAMC,EAAMC,KAAKC,MAAMH,EAAEI,OACzBnM,EAAOwL,EAAQQ,MAEbJ,EAAGQ,QACHV,OAIJE,EAAGE,iBAAiB,UAAW,SAAAC,GAC7BJ,EAAOI,KAGTH,EAAGE,iBAAiB,UAAW,SAAAC,GACxB/L,IACHA,GAAO,EACP0L,SCHR,IAAMW,GAAS,GAMR,SAASC,GAAOC,GACrB,OAAOF,GAAOE,GAGhB,SAASC,GAAWD,GAClB,OAAIA,KAAQF,GACHZ,QAAQC,QAAQW,GAAOE,gDAGzBE,CAASF,kDAGlB,SAAAG,EAAwBH,GAAxB,IAAAI,EAAAC,EAAAC,EAAA,OAAAC,GAAAzI,EAAA0I,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAjN,MAAA,cAAAiN,EAAAjN,KAAA,EACyBmN,MAAMX,GAD/B,cACQI,EADRK,EAAAG,KAAAH,EAAAjN,KAAA,EAEwB4M,EAASS,OAFjC,cAEQR,EAFRI,EAAAG,KAGQN,EAAMQ,GAAQT,GACpBP,GAAOE,GAAQM,EAJjBG,EAAAM,OAAA,SAKST,GALT,wBAAAG,EAAAO,SAAAb,EAAApE,gCAQA,SAAS+E,GAAQT,GACf,IAAMY,EAAUC,SAAS/G,cAAc,OAEvC,OADA8G,EAAQ5D,UAAYgD,EAAQc,OACrBF,EAAQG,WC7CjB,IAAMC,GAAyB,GACzBC,GAAqB,UACrBC,GAAqB,yDAE3B,SAAApB,EAAmBrH,EAAKL,GAAxB,IAAA+I,EAAA,OAAAjB,GAAAzI,EAAA0I,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAjN,MAAA,cAAAiN,EAAAjN,KAAA,EAC4BmN,MAAM7H,EAAMN,EAAgBC,IADxD,cACQ+I,EADRf,EAAAG,KAAAH,EAAAM,OAAA,SAESS,EAAYC,QAFrB,wBAAAhB,EAAAO,SAAAb,EAAApE,gCAKO,SAAS2F,KAAuC,IAAjCC,EAAiCnI,UAAA5B,OAAA,QAAA1E,IAAAsG,UAAA,GAAAA,UAAA,GAAxB6H,GAC7B,OAAO,IAAInC,QAAQ,SAAAC,GAAO,OAAIyC,WAAWzC,EAASwC,KAuBpD,SAASE,GAAW7M,GAClB,IAAM8M,EAAM9M,EAAO2E,OAAO,SAAChB,EAAQjF,GACjC,OAAOiF,EAAOC,OAAO,CAAClF,EAAMyD,KAAMzD,EAAM2D,QACvC,IACG0K,EAAS,IAAIC,IAAIF,GACvB,OAAOrI,MAAMP,KAAK6I,GAGpB,SAASE,GAAsBjN,GAAQ,IAAAjC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IACrC,QAAAC,EAAAC,EAAoB4B,EAApB1B,OAAAC,cAAAR,GAAAI,EAAAC,EAAAI,QAAAC,MAAAV,GAAA,EAA4B,KAAjBW,EAAiBP,EAAAQ,MAErBD,EAAMyD,OACTzD,EAAMyD,KAAOmK,IAEV5N,EAAM2D,OACT3D,EAAM2D,KAAOkK,IAIf7N,EAAMyD,KAAO+K,GAAmBxO,EAAMyD,MACtCzD,EAAM2D,KAAO8K,GAAmBzO,EAAM2D,OAZH,MAAAhD,GAAArB,GAAA,EAAAC,EAAAoB,EAAA,YAAAtB,GAAA,MAAAK,EAAAkB,QAAAlB,EAAAkB,SAAA,WAAAtB,EAAA,MAAAC,aAgBxBmP,qFAAf,SAAAC,EAAkCrN,GAAlC,IAAAT,EAAAC,EAAAC,EAAAE,EAAAD,EAAAhB,EAAA,OAAA6M,GAAAzI,EAAA0I,KAAA,SAAA8B,GAAA,cAAAA,EAAA5B,KAAA4B,EAAA9O,MAAA,cACEyO,GAAsBjN,GADxBsN,EAAA9O,KAAA,EDvCyB+O,ECyCRV,GAAW7M,GDxCnBkK,QAAQ4C,IAAIS,EAAMtN,IAAIgL,KCsC/B,OAIE,IAJF1L,GAAA,EAAAC,GAAA,EAAAC,OAAAvB,EAAAoP,EAAA5B,KAAA,EAIE/L,EAAoBK,EAApB1B,OAAAC,cAAAgB,GAAAG,EAAAC,EAAAnB,QAAAC,MAAAc,GAAA,GAAWb,EAAiBgB,EAAAf,OACpB4D,QAAUwI,GAAOrM,EAAMyD,MAC7BzD,EAAM+D,QAAUsI,GAAOrM,EAAM2D,MANjCiL,EAAA9O,KAAA,iBAAA8O,EAAA5B,KAAA,GAAA4B,EAAAE,GAAAF,EAAA,SAAA9N,GAAA,EAAAC,EAAA6N,EAAAE,GAAA,QAAAF,EAAA5B,KAAA,GAAA4B,EAAA5B,KAAA,GAAAnM,GAAA,MAAAI,EAAAL,QAAAK,EAAAL,SAAA,WAAAgO,EAAA5B,KAAA,IAAAlM,EAAA,CAAA8N,EAAA9O,KAAA,eAAAiB,EAAA,eAAA6N,EAAAG,OAAA,mBAAAH,EAAAG,OAAA,6BAAAH,EAAAtB,ODvCO,IAAkBuB,GCuCzBF,EAAAtG,KAAA,sDAUA,SAAS2G,GAAiBC,GACxB,OAAOA,EAAWC,QAAQ,MAAQ,GAAKD,EAAWC,QAAQ,MAAQ,EAGpE,SAASC,GAAeC,EAAMC,GAC5B,OAAOzJ,EAAKwJ,EAAMC,GAAY,OAGhC,SAASb,GAAmBlC,GAE1B,OAAO6C,GAAe,oBADAH,GAAiB1C,GAAQsB,GAAqBtB,GAItE,SAASmC,GAAmBnC,GAE1B,OAAO6C,GAAe,oBADAH,GAAiB1C,GAAQuB,GAAqBvB,YAIvDgD,qFAAf,SAAAC,EAA4BpQ,GAA5B,OAAA0N,GAAAzI,EAAA0I,KAAA,SAAA0C,GAAA,cAAAA,EAAAxC,KAAAwC,EAAA1P,MAAA,cAAA0P,EAAA1P,KAAA,EAKQ4O,GAAmBvP,EAAMQ,QALjC,wBAAA6P,EAAAlC,SAAAiC,EAAAlH,gCAQO,SAASoH,GAAYC,EAASC,GAEnC,qDAAOC,CADKhK,EAAK8J,EAAD,SAAAxK,OAAmByK,KAI9B,SAAeE,GAAtBC,EAAAC,EAAAC,GAAA,OAAAC,GAAAC,MAAA7H,KAAAvC,0DAAO,SAAAqK,EAA+BT,EAASC,EAAQS,GAAhD,IAAAC,EAAAC,EAKIC,EALJC,EAAA,OAAA3D,GAAAzI,EAAA0I,KAAA,SAAA2D,GAAA,cAAAA,EAAAzD,KAAAyD,EAAA3Q,MAAA,cAKIyQ,EALJ,SAKYpR,GAKf,OAJAmR,EAAQA,EAAMI,KAANC,OAAAC,GAAA,EAAAD,CAAA9D,GAAAzI,EAAAyM,KAAW,SAAAC,IAAA,OAAAjE,GAAAzI,EAAA0I,KAAA,SAAAiE,GAAA,cAAAA,EAAA/D,KAAA+D,EAAAjR,MAAA,cAAAiR,EAAAjR,KAAA,EACXwP,GAAanQ,GADF,cAAA4R,EAAA1D,OAAA,SAEV+C,EAAaC,EAAMlR,IAFT,wBAAA4R,EAAAzD,SAAAwD,EAAAzI,UAIZxG,EAAkB1C,EAAMQ,SAV5B8Q,EAAA3Q,KAAA,EACc2P,GAAYC,EAASC,GADnC,cACCU,EADDI,EAAAvD,KAGDoD,EAAQ9E,QAAQC,UAUd+E,EAAQ5K,EAAKT,EAAiBuK,GAAlB,UAAAxK,OAAsCyK,IAbnDc,EAAA3Q,KAAA,EAcCwL,GAAUkF,EAAOD,GAdlB,cAAAE,EAAA3Q,KAAA,GAeCwQ,EAfD,yBAAAG,EAAAnD,SAAA6C,EAAA9H,gCAkBA,SAAS2I,GAAeC,EAAQvP,GACrC,OAAOuP,EAAO3M,OAAO,SAAAnF,GAAK,OAAIA,EAAMuC,OAASA,IAAM,GCrHrD,IAAMwP,GAAgBC,YAAO,MAAPA,CAAc,CAClCC,aAAc,QACdC,QAAS,SAGLpO,GAAOkO,YAAO,OAAPA,CAAe,CAC1BG,QAAS,eACTC,cAAe,QACfC,SAAU,SACVC,WAAY,IACZ7O,MAAOmE,IAGH2K,GAAmBP,YAAO,MAAPA,CAAc,CACrCQ,SAAU,WACV1I,MAAO,OACPE,OAAQ,OACRyI,YAAa,QACbC,YAAa,MACbC,YAAa/K,EACbnE,MAAOmE,IAGHgL,GAAYZ,YAAO,MAAPA,CAAc,SAAAa,GAAA,MAAgB,CAC9C7I,OAAQ,OACR8I,gBAF8BD,EAAGpP,SAK7BsP,GAAef,YAAO,MAAPA,CAAc,CACjChI,OAAQ,OACRkI,QAAS,QACTG,SAAU,SACVC,WAAY,IACZQ,gBAAiBlL,IA+BJoL,kMA3BUnO,GACrB,ODzBG,SAAiCA,GAGtC,OAAQA,GACN,IAAK,kBACH,MAAO,2BACT,IAAK,uBACH,MAAO,yBACT,IAAK,aACH,MAAO,aACT,IAAK,iBACH,MAAO,yBACT,IAAK,iBACH,MAAO,uBACT,QACE,OAAOA,GCUFoO,CAAwBpO,oCAI/B,OACEwC,EAAApC,EAAAqC,cAACyK,GAAD,KACE1K,EAAApC,EAAAqC,cAACxD,GAAD,KAAOoF,KAAK4B,MAAMjK,MAAMgD,MACxBwD,EAAApC,EAAAqC,cAACiL,GAAD,KACGrJ,KAAK4B,MAAMjK,MAAMsD,MAChBkD,EAAApC,EAAAqC,cAACyL,GAAD,KACG7J,KAAKgK,uBAAuBhK,KAAK4B,MAAMjK,MAAMsD,MAAMU,QAGtDwC,EAAApC,EAAAqC,cAACsL,GAAD,CACEnP,MAAOyF,KAAK4B,MAAMjK,MAAM4C,MACxB0P,MAAO,CACLrJ,MAAK,GAAA/D,OAAKmD,KAAK4B,MAAMjK,MAAMkD,OAAtB,iBAlBA2D,IAAMC,yOCrC3B,IAAMoK,GAAgBC,YAAO,MAAPA,CAAHoB,KAEH,SAAAtI,GAAK,OAAKA,EAAMxB,YAAc,iBAAmB,OAQ3D+J,GAAYrB,YAAO,MAAPA,CAAc,CAC9BlI,MAAO,OACPwJ,aAAc,iBACdrB,aAAc,OACdG,cAAe,SAyCFmB,8MArCbC,MAAQ,CACN5K,iBAAkB,QAGpB6K,gBAAkB,SAAA5S,GAChB,IAAM6S,EAAsB,SAACF,EAAO3S,GAClC,OAAO2S,EAAM5K,mBAAqB/H,EAAM8C,IAAM9C,EAAM8C,IAAM,MAG5DiH,EAAKE,MAAM6I,eAAeD,EAAoB9I,EAAK4I,MAAO3S,IAE1D+J,EAAKgJ,SAAS,SAAAJ,GAAK,MAAK,CACtB5K,iBAAkB8K,EAAoBF,EAAO3S,+EAIxC,IAAAgT,EAAA3K,KACCN,EAAqBM,KAAKsK,MAA1B5K,iBACR,OACEvB,EAAApC,EAAAqC,cAACD,EAAApC,EAAM6O,SAAP,KACEzM,EAAApC,EAAAqC,cAAC+L,GAAD,cAAkBnK,KAAK4B,MAAMvI,MAC5B2G,KAAK4B,MAAM3I,OACR+G,KAAK4B,MAAM3I,OAAOC,IAAI,SAACvB,EAAOgC,GAAR,OACpBwE,EAAApC,EAAAqC,cAACyM,GAAD,CACEtO,IAAK,gBAAkB5C,EACvBmR,QAAS,kBAAMH,EAAKJ,gBAAgB5S,IACpCyI,YAAaV,IAAqB/H,EAAM8C,KAExC0D,EAAApC,EAAAqC,cAAC2M,GAAD,CAAQpT,MAAOA,EAAO4E,IAAK,SAAW5C,YAG1CxC,UAhCaqH,IAAMC,ksBCjB/B,IVFiCuM,GUE3BC,GAAuBnC,YAAO,MAAPA,CAAc,CACzCG,QAAS,OACTiC,eAAgB,SAChBlC,QAAS,SACTpI,MAAO,SAGHuK,GAASrC,YAAO,SAAPA,CAAHsC,MAyFGC,8MAjDbC,gBAAkB,WAChB5J,EAAKE,MAAM2J,qBAGbC,eAAiB,WACf9J,EAAKE,MAAM6J,uBAGbC,cAAgB,WACdhK,EAAKE,MAAM+J,sBAGbC,eAAiB,SAAArP,GACf,OAAQA,GACN,IAAK,OACHmF,EAAK8J,iBACL,MACF,IAAK,QACH9J,EAAKgK,gBACL,MACF,IAAK,QACHhK,EAAK4J,4FAxBT,OAAOtL,KAAK6L,0DAgCZ,OACE1N,EAAApC,EAAAqC,cAAC6M,GAAD,KACE9M,EAAApC,EAAAqC,cAAC+M,GAAD,CAAQL,QAAS9K,KAAKsL,iBACnBtL,KAAK4B,MAAMkK,OAAS,OAAS,SAEhC3N,EAAApC,EAAAqC,cAAC+M,GAAD,CAAQL,QAAS9K,KAAKwL,eAAgBO,UAAW/L,KAAK4B,MAAMkK,QAA5D,YAGA3N,EAAApC,EAAAqC,cAAC+M,GAAD,CAAQL,QAAS9K,KAAK0L,cAAeK,UAAW/L,KAAK4B,MAAMkK,QAA3D,WAGA3N,EAAApC,EAAAqC,cAAC4N,GAAAjQ,EAAD,CACEkQ,WAAY,CAAC,OAAQ,QAAS,SAC9BC,WAAYlM,KAAK4L,yBA/CCpN,IAAMC,WCtC5B0N,GAAmBrD,YAAO,MAAPA,CAAc,CACrCG,QAAS,OACTiC,eAAgB,gBAChBlC,QAAS,SACTpI,MAAO,SAGHwL,GAAetD,YAAO,MAAPA,CAAc,CACjCG,QAAS,OACToD,cAAe,SACfzL,MAAO,SAGH0L,GAAoBxD,YAAO,MAAPA,CAAc,CACtClI,MAAO,OACP2L,WAAY,SAqECC,gMAhEX,IAAIC,GAAW,EAEXzM,KAAK4B,MAAM8K,QAAQ1E,MAAQhI,KAAK4B,MAAM8K,QAAQC,QACZ,SAAhC3M,KAAK4B,MAAM8K,QAAQD,WACrBA,GAAW,GAGbzM,KAAK4B,MAAMgL,YACT5M,KAAK4B,MAAM8K,QAAQ1E,KACnBhI,KAAK4B,MAAM8K,QAAQC,OACnBF,IAGFzM,KAAK6M,aAAc,mCAKrB,OAAI7M,KAAK6M,YACA1O,EAAApC,EAAAqC,cAAC0O,EAAD,MAGL9M,KAAK4B,MAAMmL,aACN/M,KAAKgN,aAGP7O,EAAApC,EAAAqC,cAAA,mEAIP,OACED,EAAApC,EAAAqC,cAACD,EAAApC,EAAM6O,SAAP,KACEzM,EAAApC,EAAAqC,cAAC+N,GAAD,KACEhO,EAAApC,EAAAqC,cAACgO,GAAD,KACEjO,EAAApC,EAAAqC,cAAC6O,EAAD,CACEhU,OAAQ+G,KAAK4B,MAAMmL,aAAa9T,OAChCH,KAAMkH,KAAK4B,MAAMmL,aAAajU,KAC9BkJ,QAAShC,KAAK4B,MAAMoB,KAAKpC,MACzBsB,KAAMlC,KAAK4B,MAAMoB,KAAKlC,OACtBpB,iBAAkBM,KAAK4B,MAAMlC,mBAE/BvB,EAAApC,EAAAqC,cAAC8O,GAAD,CACE3B,gBAAiBvL,KAAK4B,MAAM2J,gBAC5BE,kBAAmBzL,KAAK4B,MAAM6J,kBAC9BE,iBAAkB3L,KAAK4B,MAAM+J,iBAC7BG,OAAQ9L,KAAK4B,MAAMkK,UAGgB,SAAtC9L,KAAK4B,MAAM8K,QAAQS,gBAClBhP,EAAApC,EAAAqC,cAACkO,GAAD,KACEnO,EAAApC,EAAAqC,cAACgP,GAAD,CACE/T,KAAM2G,KAAK4B,MAAMmL,aAAa1T,KAC9BJ,OAAQ+G,KAAK4B,MAAMmL,aAAa9T,OAChCH,KAAMkH,KAAK4B,MAAMmL,aAAajU,KAC9B2R,eAAgBzK,KAAK4B,MAAM6I,2BAxDxBjM,IAAMC,WChBZsJ,GAAe,SAACC,EAAMlR,GAAP,MAAkB,CAC5CoD,KAAM,gBACN8N,OACAlR,UAGWuW,GAAkB,SAAAvW,GAAK,MAAK,CACvCoD,KAAM,oBACNpD,UAsCWwW,GAAgB,SAAhBA,EAAgBxW,GAC3B,sBAAAyW,EAAAjF,OAAAC,GAAA,EAAAD,CAAA9D,GAAAzI,EAAAyM,KAAO,SAAAlC,EAAOkH,EAAUC,GAAjB,IAAA7E,EAAA8E,EAAAC,EAAA3W,EAAAC,EAAAC,EAAAG,EAAAD,EAAAwW,EAAAC,EAAA,OAAArJ,GAAAzI,EAAA0I,KAAA,SAAA8B,GAAA,cAAAA,EAAA5B,KAAA4B,EAAA9O,MAAA,OACCmR,EAAS6E,IAAW7E,OAAOkF,QAC3BJ,EAAa9E,EAAO/B,QAAQ/P,GAC5B6W,EAAe/E,EAAOkF,MAAMJ,GAH7B1W,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAAoP,EAAA5B,KAAA,EAAAtN,EAKesW,EALfpW,OAAAC,YAAA,UAAAR,GAAAI,EAAAC,EAAAI,QAAAC,KAAA,CAAA6O,EAAA9O,KAAA,YAKMX,EALNM,EAAAQ,OAMC6V,IAAW3B,OANZ,CAAAvF,EAAA9O,KAAA,gBAAA8O,EAAAvB,OAAA,yBAAAuB,EAAA9O,KAAA,GAOGkO,GAAM,IAPT,QAQH6H,EAASH,GAAgBvW,IARtB,QAAAE,GAAA,EAAAuP,EAAA9O,KAAA,gBAAA8O,EAAA9O,KAAA,iBAAA8O,EAAA5B,KAAA,GAAA4B,EAAAE,GAAAF,EAAA,SAAAtP,GAAA,EAAAC,EAAAqP,EAAAE,GAAA,QAAAF,EAAA5B,KAAA,GAAA4B,EAAA5B,KAAA,GAAA3N,GAAA,MAAAK,EAAAkB,QAAAlB,EAAAkB,SAAA,WAAAgO,EAAA5B,KAAA,IAAA1N,EAAA,CAAAsP,EAAA9O,KAAA,eAAAP,EAAA,eAAAqP,EAAAG,OAAA,mBAAAH,EAAAG,OAAA,aAWCmH,EAAYF,EAAaA,EAAa9R,OAAS,IACvCtC,SACPkU,IAAW3B,QAAQ0B,EApEC,CAC7BtT,KAAM,cAqEFsT,EAASF,EAAcO,IAfpB,yBAAAtH,EAAAtB,SAAAqB,EAAAtG,KAAA,+BAAP,gBAAA+N,EAAAC,GAAA,OAAAT,EAAA1F,MAAA7H,KAAAvC,YAAA,IC9CIiP,IbT2B1B,GaSA3M,OAAOC,SAAS2P,SbRpCjD,GAAEnP,OAKAmP,GACV3N,OAAO,GACPf,MAAM,KACNpD,IAAIkD,GAGKwB,OAAO,SAAChB,EAAQsR,GAE1B,OADAtR,EAAOsR,EAAI3R,KAAO2R,EAAItW,MACfgF,GACN,IAbM,Ga6BIuR,eApBS,SAAA7D,GACtB,MAAO,CACLoC,QAASA,GACT1J,KAAMsH,EAAMtH,KACZ8I,OAAQxB,EAAMwB,OACdiB,aAAczC,EAAMyC,aACpBnE,OAAQ0B,EAAM1B,OACdlJ,iBAAkB4K,EAAM5K,mBAID,SAAA8N,GAAQ,MAAK,CACtCZ,YAAa,SAAC5E,EAAM2E,EAAQF,GAAf,OACXe,EDQuB,SAACxF,EAAM2E,EAAQF,GACxC,sBAAA9C,EAAArB,OAAAC,GAAA,EAAAD,CAAA9D,GAAAzI,EAAAyM,KAAO,SAAApE,EAAOoJ,EAAUC,GAAjB,OAAAjJ,GAAAzI,EAAA0I,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAjN,MAAA,cACL+V,EA9BgC,CAClCtT,KAAM,mBA4BCwK,EAAAjN,KAAA,EAGC+P,GAAgBmF,EAAQ3E,EAAM,SAACA,EAAMlR,GAMzC,GAJAA,EAAMC,KAAOD,EAAMC,MAAQ,EAC3ByW,EAASzF,GAAaC,EAAMlR,IAGT,IAAfA,EAAMC,KAAY,CACpB,IAAMD,EAAQ2W,IAAW7E,OAAO,GAChC4E,EAASH,GAAgBvW,IACrB2V,IACFe,EAvBuB,CAC/BtT,KAAM,gBAuBEsT,EAASF,GAAcxW,QAdxB,wBAAA4N,EAAAO,SAAAb,EAAApE,SAAP,gBAAAoO,EAAAC,GAAA,OAAA1E,EAAA9B,MAAA7H,KAAAvC,YAAA,GCTWmP,CAAY5E,EAAM2E,EAAQF,KACrClB,gBAAiB,SAAAO,GAAM,OAAI0B,EDmD3B,eAAAc,EAAAhG,OAAAC,GAAA,EAAAD,CAAA9D,GAAAzI,EAAAyM,KAAO,SAAAtB,EAAOsG,EAAUC,GAAjB,OAAAjJ,GAAAzI,EAAA0I,KAAA,SAAA0C,GAAA,cAAAA,EAAAxC,KAAAwC,EAAA1P,MAAA,OACDgW,IAAW3B,QACb0B,EAvD2B,CAC/BtT,KAAM,gBAuDFsT,EAASF,GAAcG,IAAWV,gBAElCS,EA9D0B,CAC9BtT,KAAM,eAwDC,wBAAAiN,EAAAlC,SAAAiC,EAAAlH,SAAP,gBAAAyH,EAAAC,GAAA,OAAA4G,EAAAzG,MAAA7H,KAAAvC,YAAA,KClDAkO,iBAAkB,kBAAM6B,ED6DxB,eAAAe,EAAAjG,OAAAC,GAAA,EAAAD,CAAA9D,GAAAzI,EAAAyM,KAAO,SAAAC,EAAO+E,EAAUC,GAAjB,IAAAe,EAAAzB,EAAAnE,EAAA6F,EAAA,OAAAjK,GAAAzI,EAAA0I,KAAA,SAAAiE,GAAA,cAAAA,EAAA/D,KAAA+D,EAAAjR,MAAA,OAAA+W,EAC4Bf,IAAzBV,EADHyB,EACGzB,aAAcnE,EADjB4F,EACiB5F,QAChB6F,EAAc9F,GAAeC,EAAQmE,EAAa1T,KAAO,KAE7DmU,EAASH,GAAgBoB,IAJtB,wBAAA/F,EAAAzD,SAAAwD,EAAAzI,SAAP,gBAAA2H,EAAA+G,GAAA,OAAAH,EAAA1G,MAAA7H,KAAAvC,YAAA,KC5DAgO,kBAAmB,kBAAM+B,EDsEzB,eAAAmB,EAAArG,OAAAC,GAAA,EAAAD,CAAA9D,GAAAzI,EAAAyM,KAAO,SAAAV,EAAO0F,EAAUC,GAAjB,IAAAmB,EAAA7B,EAAAnE,EAAA6F,EAAA,OAAAjK,GAAAzI,EAAA0I,KAAA,SAAA2D,GAAA,cAAAA,EAAAzD,KAAAyD,EAAA3Q,MAAA,OAAAmX,EAC4BnB,IAAzBV,EADH6B,EACG7B,aAAcnE,EADjBgG,EACiBhG,QAChB6F,EAAc9F,GAAeC,EAAQmE,EAAa1T,KAAO,KAE7DmU,EAASH,GAAgBoB,IAJtB,wBAAArG,EAAAnD,SAAA6C,EAAA9H,SAAP,gBAAA6O,EAAAC,GAAA,OAAAH,EAAA9G,MAAA7H,KAAAvC,YAAA,KCrEAgN,eAAgB,SAAAsE,GAAO,OAAIvB,EDDC,SAAAuB,GAAO,MAAK,CACxC7U,KAAM,kBACN6U,WCDoCtE,CAAesE,OAGtCZ,CAGb3B,aCpBIwC,GAAaC,YAAgBC,MAC7BC,GAAQC,YCfC,WAAwB,IAAvB9E,EAAuB7M,UAAA5B,OAAA,QAAA1E,IAAAsG,UAAA,GAAAA,UAAA,GAAf,GAAI4R,EAAW5R,UAAA5B,OAAA,EAAA4B,UAAA,QAAAtG,EACrC,OAAQkY,EAAOnV,MACb,IAAK,aACH,OAAOoO,OAAAgH,EAAA,EAAAhH,CAAA,GAAKgC,EAAZ,CAAmBwB,QAAQ,IAC7B,IAAK,cACH,OAAOxD,OAAAgH,EAAA,EAAAhH,CAAA,GAAKgC,EAAZ,CAAmBwB,QAAQ,IAC7B,IAAK,oBACH,OAAOxD,OAAAgH,EAAA,EAAAhH,CAAA,GAAKgC,EAAZ,CAAmByC,aAAcsC,EAAOvY,QAC1C,IAAK,gBACH,IAAMA,EAAQD,EAAYwY,EAAOvY,OACjC,OAAOwR,OAAAgH,EAAA,EAAAhH,CAAA,GACFgC,EADL,CAEEtH,KAAM,CACJlC,OAAQuO,EAAOrH,KAAKwE,KAAK+C,OACzB3O,MAAOyO,EAAOrH,KAAKwE,KAAKgD,OAE1B5G,OAAM,GAAA/L,OAAAyL,OAAAmH,EAAA,EAAAnH,CAAMgC,EAAM1B,QAAZ,CAAoB9R,MAE9B,IAAK,iBAEL,IAAK,eACH,OAAOwR,OAAAgH,EAAA,EAAAhH,CAAA,GAAKgC,GACd,IAAK,kBACH,OAAOhC,OAAAgH,EAAA,EAAAhH,CAAA,GAAKgC,EAAZ,CAAmB5K,iBAAkB2P,EAAON,UAC9C,QACE,OAAOzG,OAAAgH,EAAA,EAAAhH,CAAA,GAAKgC,KDlBG,CACnBoC,QAAS,KACT1J,KAAM,GACN4F,OAAQ,GACRkD,QAAQ,EACRpM,iBAAkB,MAGiCsP,IAQrDU,iBACEvR,EAAApC,EAAAqC,cAACuR,EAAA,EAAD,CAAUR,MAAOA,IACfhR,EAAApC,EAAAqC,cAACwR,GAAD,OAEFzK,SAAS0K,eAAe","file":"static/js/main.3af803a8.chunk.js","sourcesContent":["const DEFAULT_HEAD_DIRECTION = \"up\";\n\nexport function formatFrame(frame) {\n  cleanFrame(frame);\n  const snakes = formatSnakes(frame.Snakes);\n  return {\n    turn: frame.Turn,\n    snakes: snakes,\n    food: formatPositions(frame.Food),\n    gameOver: isLastFrameOfGame(snakes)\n  };\n}\n\nfunction formatSnakes(snakes) {\n  return snakes.map(formatSnake);\n}\n\nfunction formatSnake(snake) {\n  return {\n    body: snake.Body.map((p, i) => formatSnakePart(snake, i)),\n    color: snake.Color,\n    _id: snake.ID,\n    name: snake.Name,\n    health: snake.Health,\n    isDead: !!snake.Death,\n    death: formatDeath(snake.Death),\n    head: snake.Head,\n    tail: snake.Tail,\n    headSvg: snake.HeadSvg,\n    tailSvg: snake.TailSvg\n  };\n}\n\nfunction formatDeath(death) {\n  if (!death) {\n    return;\n  }\n\n  return {\n    cause: death.Cause,\n    turn: death.Turn || 0\n  };\n}\n\nfunction headDirection(snake) {\n  return snake.Body.length > 1\n    ? getDirection(snake.Body[1], snake.Body[0])\n    : DEFAULT_HEAD_DIRECTION;\n}\n\nfunction isCovered(snake, partIndex) {\n  const part = snake.Body[partIndex];\n  const next = snake.Body[partIndex - 1];\n\n  return next && next.X === part.X && next.Y === part.Y;\n}\n\nfunction formatSnakePart(snake, partIndex) {\n  const part = snake.Body[partIndex];\n  const next = snake.Body[partIndex - 1];\n  return {\n    direction: next ? getDirection(part, next) : headDirection(snake),\n    shouldRender: !isCovered(snake, partIndex),\n    type: getType(snake, partIndex),\n    x: part.X,\n    y: part.Y\n  };\n}\n\nfunction formatPositions(positions) {\n  return positions.map(formatPosition);\n}\n\nfunction formatPosition(pos) {\n  return {\n    x: pos.X,\n    y: pos.Y\n  };\n}\n\nfunction getDirection(a, b) {\n  if (a.X < b.X) {\n    return \"right\";\n  } else if (b.X < a.X) {\n    return \"left\";\n  } else if (a.Y < b.Y) {\n    return \"down\";\n  }\n  return \"up\";\n}\n\nfunction getType(snake, partIndex) {\n  if (partIndex === 0) {\n    return \"head\";\n  }\n\n  if (partIndex === snake.Body.length - 1) {\n    return \"tail\";\n  }\n\n  return \"body\";\n}\n\n// This is a workaround for fields that are omitted when they have the default\n// value. ie: int fields that need to default to 0 rather than undefined.\nfunction cleanFrame(frame) {\n  frame.Turn = frame.Turn || 0;\n\n  for (const snake of frame.Snakes) {\n    for (const part of snake.Body) {\n      part.X = part.X || 0;\n      part.Y = part.Y || 0;\n    }\n  }\n\n  for (const food of frame.Food) {\n    food.X = food.X || 0;\n    food.Y = food.Y || 0;\n  }\n}\n\nfunction oneLeft(snakes) {\n  const alive = snakes.filter(s => !s.death);\n  return alive.length <= 1;\n}\n\nexport function isLastFrameOfGame(snakes) {\n  if (snakes.length === 0) {\n    return true;\n  }\n\n  if (snakes.length === 1) {\n    return !!snakes[0].death;\n  }\n\n  return oneLeft(snakes);\n}\n","// Creates a dictionary of parameters based on the given query string. q should\n// look like \"?foo=bar&thing=blah\".\nexport function parseQueryString(q) {\n  if (!q || !q.length) {\n    return {};\n  }\n\n  // Array of key/value pairs\n  const args = q\n    .substr(1)\n    .split(\"&\")\n    .map(parseArg);\n\n  // Convert to object\n  return args.reduce((result, arg) => {\n    result[arg.key] = arg.value;\n    return result;\n  }, {});\n}\n\n// Converts \"asdf=qwer\" to { asdf: \"qwer\" } or \"asdf\" to { asdf: true }. The\n// latter example is to allow switch-like parameters like ?enableThing without\n// an equals sign.\nfunction parseArg(a) {\n  const parts = a.split(\"=\");\n  const key = parts[0];\n  const value = parts[1] === undefined ? true : decodeURIComponent(parts[1]);\n  return { key, value };\n}\n\n// Converts { a: \"aaa\", b: \"bbb\" } to \"?a=aaa&b=bbb\"\nexport function makeQueryString(query) {\n  if (!query) {\n    return \"\";\n  }\n\n  let sep = \"?\";\n  let result = \"\";\n\n  for (const key in query) {\n    const value = query[key];\n    result += `${sep}${key}=${value}`;\n    sep = \"&\";\n  }\n\n  return result;\n}\n\n// Converts http://foo to ws://foo or https://foo to wss://foo\nexport function httpToWsProtocol(url) {\n  const mappings = {\n    http: \"ws\",\n    https: \"wss\"\n  };\n\n  for (const from in mappings) {\n    const to = mappings[from];\n    if (url.substr(0, from.length + 1) === from + \":\") {\n      return to + url.substr(from.length);\n    }\n  }\n\n  throw new Error(\"Invalid URL: \" + url);\n}\n\n// Joins path components and makes sure there is exactly one '/' separating\n// them.\nexport function join(...parts) {\n  function joinPair(a, b) {\n    const cleanA = a.replace(/\\/+$/, \"\");\n    const cleanB = b.replace(/^\\/+/, \"\");\n\n    if (cleanA === \"\") {\n      return cleanB;\n    }\n\n    if (cleanB === \"\") {\n      return cleanA;\n    }\n\n    return `${cleanA}/${cleanB}`;\n  }\n\n  return parts.reduce((current, next) => joinPair(current, next), \"\");\n}\n","import React from \"react\";\n\nclass BlankState extends React.Component {\n  render() {\n    return (\n      <div>\n        To run a game you need to specify engine and game parameters in the URL.\n        For example:\n        <pre>\n          {window.location.origin}?engine=&lt;ENGINE_URL&gt;&amp;game=&lt;GAME_ID&gt;\n        </pre>\n      </div>\n    );\n  }\n}\n\nexport default BlankState;\n","export const colors = {\n  pageBackground: \"#fff\",\n  gridBackground: \"#ddd\",\n  cellBackground: \"#e8e8e8\",\n  healthBarDeathBackground: \"#333\",\n  food: \"orange\",\n  healthBar: \"#0f0\",\n  healthBarOutline: \"#555\",\n  lightText: \"#fff\",\n  darkText: \"#000\",\n\n  // colour names\n  white: \"#fff\"\n};\n","import React from \"react\";\nimport { colors } from \"../theme\";\n\nconst HIGHLIGHT_DIM = 0.25;\nconst DEAD_OPACITY = 0.15;\nconst CELL_SIZE = 20;\nconst CELL_SPACING = 4;\n\nfunction toGridSpace(slot) {\n  return (CELL_SIZE + CELL_SPACING) * slot + CELL_SPACING;\n}\n\nfunction getPartWidth(part) {\n  const extraWidth =\n    part.direction === \"left\" || part.direction === \"right\" ? CELL_SPACING : 0;\n  return CELL_SIZE + extraWidth + \"px\";\n}\n\nfunction getPartHeight(part) {\n  const extraHeight =\n    part.direction === \"up\" || part.direction === \"down\" ? CELL_SPACING : 0;\n  return CELL_SIZE + extraHeight + \"px\";\n}\n\nfunction getPartXOffset(part) {\n  const xBias = part.direction === \"left\" ? -CELL_SPACING : 0;\n  return toGridSpace(part.x) + xBias;\n}\n\nfunction getPartYOffset(part) {\n  const yBias = part.direction === \"up\" ? -CELL_SPACING : 0;\n  return toGridSpace(part.y) + yBias;\n}\n\nfunction getTailXOffset(part) {\n  switch (part.direction) {\n    case \"left\":\n      return toGridSpace(part.x) - CELL_SPACING;\n    case \"right\":\n      return toGridSpace(part.x) + CELL_SPACING;\n    default:\n      return toGridSpace(part.x);\n  }\n}\n\nfunction getTailYOffset(part) {\n  switch (part.direction) {\n    case \"up\":\n      return toGridSpace(part.y) - CELL_SPACING;\n    case \"down\":\n      return toGridSpace(part.y) + CELL_SPACING;\n    default:\n      return toGridSpace(part.y);\n  }\n}\n\nfunction getHeadXOffset(part) {\n  switch (part.direction) {\n    case \"left\":\n      return toGridSpace(part.x);\n    case \"right\":\n      return toGridSpace(part.x);\n    default:\n      return toGridSpace(part.x);\n  }\n}\n\nfunction getHeadYOffset(part) {\n  switch (part.direction) {\n    case \"up\":\n      return toGridSpace(part.y);\n    case \"down\":\n      return toGridSpace(part.y);\n    default:\n      return toGridSpace(part.y);\n  }\n}\n\nfunction getOpacity(snake, highlightedSnake) {\n  if (highlightedSnake) {\n    return snake._id === highlightedSnake ? 1 : HIGHLIGHT_DIM;\n  }\n\n  return snake.isDead ? DEAD_OPACITY : 1;\n}\n\nfunction range(size) {\n  const result = [];\n  for (let i = 0; i < size; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\nfunction sortAliveSnakesOnTop(snakes) {\n  return snakes.concat().sort((a, b) => {\n    const aOrder = a.isDead ? 0 : 1;\n    const bOrder = b.isDead ? 0 : 1;\n    return aOrder - bOrder;\n  });\n}\n\nfunction getHeadTransform(direction, viewBox) {\n  const halfX = viewBox.width / 2;\n  const halfY = viewBox.height / 2;\n  switch (direction) {\n    case \"left\":\n      return `rotate(180 ${halfX} ${halfY})`;\n    case \"up\":\n      return `rotate(-90 ${halfX} ${halfY})`;\n    case \"down\":\n      return `rotate(90 ${halfX} ${halfY})`;\n    default:\n      return \"\";\n  }\n}\n\nfunction getTailTransform(direction, viewBox) {\n  const halfX = viewBox.width / 2;\n  const halfY = viewBox.height / 2;\n  switch (direction) {\n    case \"right\":\n      return `rotate(180 ${halfX} ${halfY})`;\n    case \"down\":\n      return `rotate(-90 ${halfX} ${halfY})`;\n    case \"up\":\n      return `rotate(90 ${halfX} ${halfY})`;\n    default:\n      return \"\";\n  }\n}\n\nclass Grid extends React.Component {\n  renderPart(snake, snakeIndex, part, partIndex, highlightedSnake) {\n    switch (part.type) {\n      case \"head\":\n        return this.renderHeadPart(snake, snakeIndex, part, highlightedSnake);\n      case \"tail\":\n        return this.renderTailPart(snake, snakeIndex, part, highlightedSnake);\n      default:\n        return this.renderMiddlePart(\n          snake,\n          snakeIndex,\n          part,\n          partIndex,\n          highlightedSnake\n        );\n    }\n  }\n\n  renderHeadPart(snake, snakeIndex, part, highlighted) {\n    const x = getHeadXOffset(part);\n    const y = getHeadYOffset(part);\n    const box = snake.headSvg.viewBox.baseVal;\n    const transform = getHeadTransform(part.direction, box);\n    const viewBoxStr = `${box.x} ${box.y} ${box.width} ${box.height}`;\n\n    return (\n      <svg\n        key={\"part\" + snakeIndex + \",head\"}\n        fill={snake.color}\n        width={CELL_SIZE + \"px\"}\n        height={CELL_SIZE + \"px\"}\n        x={x}\n        y={y}\n        viewBox={viewBoxStr}\n        opacity={getOpacity(snake, highlighted)}\n        shapeRendering=\"optimizeSpeed\"\n      >\n        <g\n          transform={transform}\n          dangerouslySetInnerHTML={{ __html: snake.headSvg.innerHTML }}\n        />\n      </svg>\n    );\n  }\n\n  renderMiddlePart(snake, snakeIndex, part, partIndex, highlighted) {\n    if (!part.shouldRender) {\n      return (\n        <svg\n          key={\"part\" + snakeIndex + \",\" + partIndex}\n          shapeRendering=\"optimizeSpeed\"\n        />\n      );\n    }\n\n    return (\n      <rect\n        key={`part${snakeIndex},${part.x},${part.y}`}\n        x={getPartXOffset(part)}\n        y={getPartYOffset(part)}\n        width={getPartWidth(part)}\n        height={getPartHeight(part)}\n        opacity={getOpacity(snake, highlighted)}\n        fill={snake.color}\n        shapeRendering=\"optimizeSpeed\"\n      />\n    );\n  }\n\n  renderTailPart(snake, snakeIndex, part, highlighted) {\n    const x = getTailXOffset(part);\n    const y = getTailYOffset(part);\n    const box = snake.tailSvg.viewBox.baseVal;\n    const transform = getTailTransform(part.direction, box);\n    const viewBoxStr = `${box.x} ${box.y} ${box.width} ${box.height}`;\n\n    if (!part.shouldRender) {\n      return (\n        <svg\n          key={\"part\" + snakeIndex + \",tail\"}\n          shapeRendering=\"optimizeSpeed\"\n        />\n      );\n    }\n\n    return (\n      <svg\n        key={\"part\" + snakeIndex + \",tail\"}\n        fill={snake.color}\n        width={CELL_SIZE}\n        height={CELL_SIZE}\n        x={x}\n        y={y}\n        viewBox={viewBoxStr}\n        opacity={getOpacity(snake, highlighted)}\n        shapeRendering=\"optimizeSpeed\"\n      >\n        <g\n          transform={transform}\n          dangerouslySetInnerHTML={{ __html: snake.tailSvg.innerHTML }}\n        />\n      </svg>\n    );\n  }\n\n  renderGrid() {\n    const unsortedSnakes = this.props.snakes || [];\n    const food = this.props.food || [];\n\n    // Make alive snakes render on top of dead snakes\n    const sortedSnakes = sortAliveSnakesOnTop(unsortedSnakes);\n\n    const viewBoxWidth = toGridSpace(this.props.columns);\n    const viewBoxHeight = toGridSpace(this.props.rows);\n\n    return (\n      <svg\n        width={this.props.maxWidth}\n        height={this.props.maxHeight}\n        x={this.props.x}\n        y={this.props.y}\n        viewBox={`0 0 ${viewBoxWidth} ${viewBoxHeight}`}\n      >\n        <rect\n          width={viewBoxWidth}\n          height={viewBoxHeight}\n          fill={colors.gridBackground}\n          opacity={this.props.highlightedSnake ? HIGHLIGHT_DIM : null}\n          shapeRendering=\"optimizeSpeed\"\n        />\n\n        {range(this.props.rows).map((_, row) =>\n          range(this.props.columns).map((_, col) => (\n            <rect\n              key={\"cell\" + row + \",\" + col}\n              x={toGridSpace(col)}\n              y={toGridSpace(row)}\n              width={CELL_SIZE}\n              height={CELL_SIZE}\n              fill={colors.cellBackground}\n              opacity={this.props.highlightedSnake ? HIGHLIGHT_DIM : null}\n              shapeRendering=\"optimizeSpeed\"\n            />\n          ))\n        )}\n\n        {sortedSnakes.map((snake, snakeIndex) => {\n          return snake.body.map((part, partIndex) =>\n            this.renderPart(\n              snake,\n              snakeIndex,\n              part,\n              partIndex,\n              this.props.highlightedSnake\n            )\n          );\n        })}\n\n        {food.map((f, foodIndex) => (\n          <circle\n            key={\"food\" + foodIndex}\n            cx={toGridSpace(f.x) + CELL_SIZE / 2}\n            cy={toGridSpace(f.y) + CELL_SIZE / 2}\n            r={CELL_SIZE / 2}\n            fill={colors.food}\n            opacity={this.props.highlightedSnake ? HIGHLIGHT_DIM : null}\n            shapeRendering=\"optimizeQuality\"\n          />\n        ))}\n      </svg>\n    );\n  }\n\n  render() {\n    if (this.props.snakes) {\n      return this.renderGrid();\n    } else {\n      return;\n    }\n  }\n}\n\nexport default Grid;\n","import React from \"react\";\nimport Grid from \"./grid\";\nimport { colors } from \"../theme\";\n\nclass Board extends React.Component {\n  render() {\n    return (\n      <svg viewBox=\"0 0 90 90\">\n        <rect x=\"0\" y=\"0\" width=\"90\" height=\"90\" fill={colors.pageBackground} />\n\n        <Grid\n          snakes={this.props.snakes}\n          food={this.props.food}\n          columns={this.props.columns}\n          rows={this.props.rows}\n          highlightedSnake={this.props.highlightedSnake}\n          maxWidth={90}\n          maxHeight={90}\n          x={0}\n          y={0}\n        />\n      </svg>\n    );\n  }\n}\n\nexport default Board;\n","// Establishes websocket connection on given url and then calls receive for\n// every object sent from the server. Returns a promise that resolves when\n// receive returns true or when the server closes the connection.\nexport function streamAll(url, receive) {\n  let done = false;\n\n  return new Promise((resolve, reject) => {\n    const ws = new WebSocket(url);\n    ws.addEventListener(\"message\", e => {\n      const obj = JSON.parse(e.data);\n      done = receive(obj);\n      if (done) {\n        ws.close();\n        resolve();\n      }\n    });\n\n    ws.addEventListener(\"onerror\", e => {\n      reject(e);\n    });\n\n    ws.addEventListener(\"onclose\", e => {\n      if (!done) {\n        done = true;\n        resolve();\n      }\n    });\n  });\n}\n","/**\n * This file contains helper functions for async loading svg files that\n * can be injected inline into an html <svg> element. This is better than\n * alternatives for the following reasons:\n *\n *    <use href=\"...\"> has a problem where the game could start before the\n *    svg has finished loading whereas this method gives a promise we can wait\n *    for.\n *\n *    <image src=\"...\"> has a problem where the fill color of the image cannot\n *    be overriden. Inline svg solves this problem and allows css styles to\n *    cascade into the svg content. <use> may also have this problem?\n *\n *    Directly embedding the svg xml into react components (or similar) would\n *    mostly solve everything except that it eliminates the possibility of\n *    pulling in svg data from external trusted sources.\n *\n * The main downside to this method is that the source of the svg must be\n * trusted or else you are vulnerable to xss attacks.\n */\n\nconst loaded = {};\n\nexport function loadSvgs(paths) {\n  return Promise.all(paths.map(requireSvg));\n}\n\nexport function getSvg(path) {\n  return loaded[path];\n}\n\nfunction requireSvg(path) {\n  if (path in loaded) {\n    return Promise.resolve(loaded[path]);\n  }\n\n  return fetchSvg(path);\n}\n\nasync function fetchSvg(path) {\n  const response = await fetch(path);\n  const svgText = await response.text();\n  const svg = makeDom(svgText);\n  loaded[path] = svg;\n  return svg;\n}\n\nfunction makeDom(svgText) {\n  const wrapper = document.createElement(\"div\");\n  wrapper.innerHTML = svgText.trim();\n  return wrapper.firstChild;\n}\n","import { streamAll } from \"../io/websocket\";\nimport { makeQueryString, httpToWsProtocol, join } from \"./url\";\nimport { loadSvgs, getSvg } from \"./inline-svg\";\nimport { isLastFrameOfGame } from \"./game-state\";\n\nconst SNAKE_MIN_DELAY_MILLIS = 50;\nconst DEFAULT_SNAKE_HEAD = \"regular\";\nconst DEFAULT_SNAKE_TAIL = \"regular\";\n\nasync function get(url, query) {\n  const fetchResult = await fetch(url + makeQueryString(query));\n  return fetchResult.json();\n}\n\nexport function delay(millis = SNAKE_MIN_DELAY_MILLIS) {\n  return new Promise(resolve => setTimeout(resolve, millis));\n}\n\nexport function getReadableCauseOfDeath(cause) {\n  // Based on https://github.com/battlesnakeio/engine/blob/master/rules/death_cause.go\n\n  switch (cause) {\n    case \"snake-collision\":\n      return \"Collided with snake body\";\n    case \"snake-self-collision\":\n      return \"Collided with own body\";\n    case \"starvation\":\n      return \"Starvation\";\n    case \"head-collision\":\n      return \"Head on head collision\";\n    case \"wall-collision\":\n      return \"Collided with a wall\";\n    default:\n      return cause;\n  }\n}\n\n// Gets a list of all unique SVG paths required by the snakes.\nfunction getAllSvgs(snakes) {\n  const all = snakes.reduce((result, snake) => {\n    return result.concat([snake.Head, snake.Tail]);\n  }, []);\n  const unique = new Set(all);\n  return Array.from(unique);\n}\n\nfunction assignHeadAndTailUrls(snakes) {\n  for (const snake of snakes) {\n    // Assign default if missing\n    if (!snake.Head) {\n      snake.Head = DEFAULT_SNAKE_HEAD;\n    }\n    if (!snake.Tail) {\n      snake.Tail = DEFAULT_SNAKE_TAIL;\n    }\n\n    // Format as actual URL if it's just a name\n    snake.Head = getSnakeHeadSvgUrl(snake.Head);\n    snake.Tail = getSnakeTailSvgUrl(snake.Tail);\n  }\n}\n\nasync function setHeadAndTailSvgs(snakes) {\n  assignHeadAndTailUrls(snakes);\n  await loadSvgs(getAllSvgs(snakes));\n\n  for (const snake of snakes) {\n    snake.HeadSvg = getSvg(snake.Head);\n    snake.TailSvg = getSvg(snake.Tail);\n  }\n}\n\nfunction isIllegalSvgPath(nameOrPath) {\n  return nameOrPath.indexOf(\"/\") >= 0 || nameOrPath.indexOf(\".\") >= 0;\n}\n\nfunction svgUrlFromName(base, relative) {\n  return join(base, relative) + \".svg\";\n}\n\nfunction getSnakeHeadSvgUrl(path) {\n  const effectivePath = isIllegalSvgPath(path) ? DEFAULT_SNAKE_HEAD : path;\n  return svgUrlFromName(\"images/snake/head\", effectivePath);\n}\n\nfunction getSnakeTailSvgUrl(path) {\n  const effectivePath = isIllegalSvgPath(path) ? DEFAULT_SNAKE_TAIL : path;\n  return svgUrlFromName(\"images/snake/tail\", effectivePath);\n}\n\nasync function prepareFrame(frame) {\n  // Make sure SVGs are loaded and wait for at least minimum delay time.\n  // const delayPromise = delay(SNAKE_MIN_DELAY_MILLIS);\n  // const svgPromise = setHeadAndTailSvgs(frame.Snakes);\n  // await Promise.all([delayPromise, svgPromise]);\n  await setHeadAndTailSvgs(frame.Snakes);\n}\n\nexport function getGameInfo(baseUrl, gameId) {\n  const url = join(baseUrl, `games/${gameId}`);\n  return get(url);\n}\n\nexport async function streamAllFrames(baseUrl, gameId, receiveFrame) {\n  const game = await getGameInfo(baseUrl, gameId);\n\n  let chain = Promise.resolve();\n\n  function onFrame(frame) {\n    chain = chain.then(async () => {\n      await prepareFrame(frame);\n      return receiveFrame(game, frame);\n    });\n    return isLastFrameOfGame(frame.Snakes);\n  }\n\n  const wsUrl = join(httpToWsProtocol(baseUrl), `socket/${gameId}`);\n  await streamAll(wsUrl, onFrame);\n  await chain;\n}\n\nexport function getFrameByTurn(frames, turn) {\n  return frames.filter(frame => frame.turn === turn)[0];\n}\n","import React from \"react\";\nimport styled from \"react-emotion\";\nimport { colors } from \"../theme\";\nimport { getReadableCauseOfDeath } from \"../utils/engine-client\";\n\nconst AvatarWrapper = styled(\"div\")({\n  marginBottom: \".5rem\",\n  padding: \"1rem\"\n});\n\nconst Name = styled(\"span\")({\n  display: \"inline-block\",\n  paddingBottom: \".5rem\",\n  fontSize: \"2.5rem\",\n  fontWeight: 400,\n  color: colors.darkText\n});\n\nconst HealthBarOutline = styled(\"div\")({\n  position: \"relative\",\n  width: \"100%\",\n  height: \"3rem\",\n  borderStyle: \"solid\",\n  borderWidth: \"1px\",\n  borderColor: colors.healthBarOutline,\n  color: colors.white\n});\n\nconst HealthBar = styled(\"div\")(({ color }) => ({\n  height: \"100%\",\n  backgroundColor: color\n}));\n\nconst CauseOfDeath = styled(\"div\")({\n  height: \"100%\",\n  padding: \".5rem\",\n  fontSize: \"1.8rem\",\n  fontWeight: 400,\n  backgroundColor: colors.healthBarDeathBackground\n});\n\nclass Avatar extends React.Component {\n  getCauseOfDeathMessage(cause) {\n    return getReadableCauseOfDeath(cause);\n  }\n\n  render() {\n    return (\n      <AvatarWrapper>\n        <Name>{this.props.snake.name}</Name>\n        <HealthBarOutline>\n          {this.props.snake.death ? (\n            <CauseOfDeath>\n              {this.getCauseOfDeathMessage(this.props.snake.death.cause)}\n            </CauseOfDeath>\n          ) : (\n            <HealthBar\n              color={this.props.snake.color}\n              style={{\n                width: `${this.props.snake.health}%`\n              }}\n            />\n          )}\n        </HealthBarOutline>\n      </AvatarWrapper>\n    );\n  }\n}\n\nexport default Avatar;\n","import React from \"react\";\nimport Avatar from \"./avatar\";\nimport styled from \"react-emotion\";\n\nconst AvatarWrapper = styled(\"div\")`\n  transition: background-color 0.2s, box-shadow 0.2s;\n  box-shadow: ${props => (props.highlighted ? \"0 0 0 1px #555\" : null)};\n\n  &:hover {\n    background-color: #ededed;\n    cursor: pointer;\n  }\n`;\n\nconst TurnCount = styled(\"div\")({\n  width: \"100%\",\n  borderBottom: \"solid 1px #ccc\",\n  marginBottom: \"2rem\",\n  paddingBottom: \"1rem\"\n});\n\nclass Scoreboard extends React.Component {\n  state = {\n    highlightedSnake: null\n  };\n\n  toggleHighlight = snake => {\n    const getSnakeToHighlight = (state, snake) => {\n      return state.highlightedSnake !== snake._id ? snake._id : null;\n    };\n\n    this.props.highlightSnake(getSnakeToHighlight(this.state, snake));\n\n    this.setState(state => ({\n      highlightedSnake: getSnakeToHighlight(state, snake)\n    }));\n  };\n\n  render() {\n    const { highlightedSnake } = this.state;\n    return (\n      <React.Fragment>\n        <TurnCount>Turn: {this.props.turn}</TurnCount>\n        {this.props.snakes\n          ? this.props.snakes.map((snake, i) => (\n              <AvatarWrapper\n                key={\"avatarwrapper\" + i}\n                onClick={() => this.toggleHighlight(snake)}\n                highlighted={highlightedSnake === snake._id}\n              >\n                <Avatar snake={snake} key={\"avatar\" + i} />\n              </AvatarWrapper>\n            ))\n          : undefined}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Scoreboard;\n","import React from \"react\";\nimport styled from \"react-emotion\";\nimport KeyboardEventHandler from \"react-keyboard-event-handler\";\n\nconst MediaControlsWrapper = styled(\"div\")({\n  display: \"flex\",\n  justifyContent: \"center\",\n  padding: \"2rem 0\",\n  width: \"100%\"\n});\n\nconst Button = styled(\"button\")`\n  display: inline-block;\n  min-width: 10rem;\n  padding: 0.5rem 1rem;\n  margin: 0 0.5rem;\n  border: solid 1px #bbb;\n  border-radius: 5px;\n  background: #efefef;\n  color: #333;\n  font-size: 2rem;\n  text-decoration: none;\n  text-align: center;\n  cursor: pointer;\n  transition: background 250ms ease-in-out, transform 150ms ease;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n\n  &:hover {\n    background: #dfdfdf;\n  }\n\n  &:focus {\n    outline: none;\n  }\n\n  &:disabled {\n    color: #ccc;\n    cursor: not-allowed;\n  }\n\n  &:disabled:hover {\n    background: #efefef;\n  }\n`;\n\nclass MediaControls extends React.Component {\n  render() {\n    return this.renderControls();\n  }\n\n  handlePlayPause = () => {\n    this.props.toggleGamePause();\n  };\n\n  handleBackward = () => {\n    this.props.stepBackwardFrame();\n  };\n\n  handleForward = () => {\n    this.props.stepForwardFrame();\n  };\n\n  handleKeyEvent = key => {\n    switch (key) {\n      case \"left\":\n        this.handleBackward();\n        break;\n      case \"right\":\n        this.handleForward();\n        break;\n      case \"space\":\n        this.handlePlayPause();\n        break;\n      default:\n        break;\n    }\n  };\n\n  renderControls() {\n    return (\n      <MediaControlsWrapper>\n        <Button onClick={this.handlePlayPause}>\n          {this.props.paused ? \"Play\" : \"Pause\"}\n        </Button>\n        <Button onClick={this.handleBackward} disabled={!this.props.paused}>\n          Backward\n        </Button>\n        <Button onClick={this.handleForward} disabled={!this.props.paused}>\n          Forward\n        </Button>\n        <KeyboardEventHandler\n          handleKeys={[\"left\", \"right\", \"space\"]}\n          onKeyEvent={this.handleKeyEvent}\n        />\n      </MediaControlsWrapper>\n    );\n  }\n}\n\nexport default MediaControls;\n","import React from \"react\";\nimport styled from \"react-emotion\";\n\nimport BlankState from \"./blank-state\";\nimport Board from \"./board\";\nimport Scoreboard from \"./scoreboard\";\nimport MediaControls from \"./mediaControls\";\n\nconst GameBoardWrapper = styled(\"div\")({\n  display: \"flex\",\n  justifyContent: \"space-between\",\n  padding: \"0 2rem\",\n  width: \"100%\"\n});\n\nconst BoardWrapper = styled(\"div\")({\n  display: \"flex\",\n  flexDirection: \"column\",\n  width: \"65vw\"\n});\n\nconst ScoreboardWrapper = styled(\"div\")({\n  width: \"35vw\",\n  marginLeft: \"2rem\"\n});\n\nclass Game extends React.Component {\n  componentWillMount() {\n    let autoplay = false;\n\n    if (this.props.options.game && this.props.options.engine) {\n      if (this.props.options.autoplay === \"true\") {\n        autoplay = true;\n      }\n\n      this.props.fetchFrames(\n        this.props.options.game,\n        this.props.options.engine,\n        autoplay\n      );\n    } else {\n      this.invalidArgs = true;\n    }\n  }\n\n  render() {\n    if (this.invalidArgs) {\n      return <BlankState />;\n    }\n\n    if (this.props.currentFrame) {\n      return this.renderGame();\n    }\n\n    return <div>Loading game...</div>;\n  }\n\n  renderGame() {\n    return (\n      <React.Fragment>\n        <GameBoardWrapper>\n          <BoardWrapper>\n            <Board\n              snakes={this.props.currentFrame.snakes}\n              food={this.props.currentFrame.food}\n              columns={this.props.grid.width}\n              rows={this.props.grid.height}\n              highlightedSnake={this.props.highlightedSnake}\n            />\n            <MediaControls\n              toggleGamePause={this.props.toggleGamePause}\n              stepBackwardFrame={this.props.stepBackwardFrame}\n              stepForwardFrame={this.props.stepForwardFrame}\n              paused={this.props.paused}\n            />\n          </BoardWrapper>\n          {this.props.options.hideScoreboard !== \"true\" && (\n            <ScoreboardWrapper>\n              <Scoreboard\n                turn={this.props.currentFrame.turn}\n                snakes={this.props.currentFrame.snakes}\n                food={this.props.currentFrame.food}\n                highlightSnake={this.props.highlightSnake}\n              />\n            </ScoreboardWrapper>\n          )}\n        </GameBoardWrapper>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Game;\n","import { streamAllFrames, getFrameByTurn, delay } from \"../utils/engine-client\";\n\nexport const gameOver = () => ({\n  type: \"GAME_OVER\"\n});\n\nexport const requestFrames = () => ({\n  type: \"REQUEST_FRAMES\"\n});\n\nexport const receiveFrame = (game, frame) => ({\n  type: \"RECEIVE_FRAME\",\n  game,\n  frame\n});\n\nexport const setCurrentFrame = frame => ({\n  type: \"SET_CURRENT_FRAME\",\n  frame\n});\n\nexport const pauseGame = () => ({\n  type: \"PAUSE_GAME\"\n});\n\nexport const resumeGame = () => ({\n  type: \"RESUME_GAME\"\n});\n\nexport const highlightSnake = snakeId => ({\n  type: \"HIGHLIGHT_SNAKE\",\n  snakeId\n});\n\nexport const fetchFrames = (game, engine, autoplay) => {\n  return async (dispatch, getState) => {\n    dispatch(requestFrames());\n\n    await streamAllFrames(engine, game, (game, frame) => {\n      // Workaround for bug where turn exluded on turn 0\n      frame.Turn = frame.Turn || 0;\n      dispatch(receiveFrame(game, frame));\n\n      // Workaround to render the first frame into the board\n      if (frame.Turn === 0) {\n        const frame = getState().frames[0];\n        dispatch(setCurrentFrame(frame));\n        if (autoplay) {\n          dispatch(resumeGame());\n          dispatch(playFromFrame(frame));\n        }\n      }\n    });\n  };\n};\n\nexport const playFromFrame = frame => {\n  return async (dispatch, getState) => {\n    const frames = getState().frames.slice(); // Don't modify in place\n    const frameIndex = frames.indexOf(frame);\n    const slicedFrames = frames.slice(frameIndex);\n\n    for (const frame of slicedFrames) {\n      if (getState().paused) return;\n      await delay(50);\n      dispatch(setCurrentFrame(frame));\n    }\n\n    const lastFrame = slicedFrames[slicedFrames.length - 1];\n    if (lastFrame.gameOver) {\n      if (!getState().paused) dispatch(gameOver());\n    } else {\n      dispatch(playFromFrame(lastFrame));\n    }\n  };\n};\n\nexport const toggleGamePause = () => {\n  return async (dispatch, getState) => {\n    if (getState().paused) {\n      dispatch(resumeGame());\n      dispatch(playFromFrame(getState().currentFrame));\n    } else {\n      dispatch(pauseGame());\n    }\n  };\n};\n\nexport const stepForwardFrame = () => {\n  return async (dispatch, getState) => {\n    const { currentFrame, frames } = getState();\n    const stepToFrame = getFrameByTurn(frames, currentFrame.turn + 1);\n    if (stepToFrame) {\n      dispatch(setCurrentFrame(stepToFrame));\n    }\n  };\n};\n\nexport const stepBackwardFrame = () => {\n  return async (dispatch, getState) => {\n    const { currentFrame, frames } = getState();\n    const stepToFrame = getFrameByTurn(frames, currentFrame.turn - 1);\n    if (stepToFrame) {\n      dispatch(setCurrentFrame(stepToFrame));\n    }\n  };\n};\n","import { connect } from \"react-redux\";\nimport { parseQueryString } from \"../utils/url\";\nimport Game from \"../components/game\";\nimport {\n  fetchFrames,\n  toggleGamePause,\n  stepForwardFrame,\n  stepBackwardFrame,\n  highlightSnake\n} from \"../actions\";\n\nconst options = parseQueryString(window.location.search);\n\nconst mapStateToProps = state => {\n  return {\n    options: options,\n    grid: state.grid,\n    paused: state.paused,\n    currentFrame: state.currentFrame,\n    frames: state.frames,\n    highlightedSnake: state.highlightedSnake\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  fetchFrames: (game, engine, autoplay) =>\n    dispatch(fetchFrames(game, engine, autoplay)),\n  toggleGamePause: paused => dispatch(toggleGamePause(paused)),\n  stepForwardFrame: () => dispatch(stepForwardFrame()),\n  stepBackwardFrame: () => dispatch(stepBackwardFrame()),\n  highlightSnake: snakeId => dispatch(highlightSnake(snakeId))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Game);\n","import React from \"react\";\nimport { render } from \"react-dom\";\n// import { compose, createStore, applyMiddleware } from \"redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport rootReducer from \"./reducers\";\nimport App from \"./containers/app\";\nimport thunkMiddleware from \"redux-thunk\";\n\nconst initialState = {\n  options: null,\n  grid: [],\n  frames: [],\n  paused: true,\n  highlightedSnake: null\n};\nconst middleware = applyMiddleware(thunkMiddleware);\nconst store = createStore(rootReducer, initialState, middleware);\n// const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n// const store = createStore(\n//   rootReducer,\n//   initialState,\n//   composeEnhancers(applyMiddleware(thunkMiddleware))\n// );\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n","import { formatFrame } from \"../utils/game-state\";\n\nexport default (state = {}, action) => {\n  switch (action.type) {\n    case \"PAUSE_GAME\":\n      return { ...state, paused: true };\n    case \"RESUME_GAME\":\n      return { ...state, paused: false };\n    case \"SET_CURRENT_FRAME\":\n      return { ...state, currentFrame: action.frame };\n    case \"RECEIVE_FRAME\":\n      const frame = formatFrame(action.frame);\n      return {\n        ...state,\n        grid: {\n          height: action.game.Game.Height,\n          width: action.game.Game.Width\n        },\n        frames: [...state.frames, frame] // Be smart: this consumes A LOT of memory...\n      };\n    case \"REQUEST_FRAMES\":\n      return { ...state };\n    case \"FETCH_FRAMES\":\n      return { ...state };\n    case \"HIGHLIGHT_SNAKE\":\n      return { ...state, highlightedSnake: action.snakeId };\n    default:\n      return { ...state };\n  }\n};\n"],"sourceRoot":""}
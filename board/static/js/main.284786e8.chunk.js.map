{"version":3,"sources":["utils/game-state.js","utils/url.js","components/blank-state.jsx","theme/index.js","components/grid.jsx","components/board.jsx","io/websocket.js","utils/inline-svg.js","utils/engine-client.js","components/avatar.jsx","components/scoreboard.jsx","components/mediaControls.jsx","components/game.jsx","actions/index.js","containers/app.jsx","index.js","reducers/index.js"],"names":["DEFAULT_HEAD_DIRECTION","formatFrame","frame","Turn","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Snakes","Symbol","iterator","next","done","snake","value","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","Body","part","X","Y","err","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","Food","food","cleanFrame","positions","snakes","formatSnakes","turn","map","formatPosition","gameOver","isLastFrameOfGame","formatSnake","body","p","i","partIndex","direction","getDirection","headDirection","shouldRender","isCovered","type","getType","x","y","formatSnakePart","color","Color","_id","ID","name","Name","health","Health","isDead","Death","death","formatDeath","head","Head","tail","Tail","headSvg","HeadSvg","tailSvg","TailSvg","cause","Cause","length","pos","a","b","filter","s","oneLeft","parseArg","parts","split","key","decodeURIComponent","makeQueryString","query","sep","result","concat","httpToWsProtocol","url","mappings","http","https","from","to","substr","Error","join","_len","arguments","Array","_key","reduce","current","cleanA","replace","cleanB","joinPair","BlankState","react_default","createElement","window","location","origin","React","Component","colors","themes","HIGHLIGHT_DIM","DEAD_OPACITY","CELL_SIZE","CELL_SPACING","toGridSpace","slot","getPartWidth","extraWidth","getPartHeight","extraHeight","getPartXOffset","xBias","getPartYOffset","yBias","getOpacity","highlightedSnake","range","size","push","Grid","snakeIndex","this","renderHeadPart","renderTailPart","behind","checkIfCornerPart","renderCornerPart","renderMiddlePart","highlighted","getHeadXOffset","getHeadYOffset","box","viewBox","baseVal","transform","halfX","width","halfY","height","getHeadTransform","viewBoxStr","fill","opacity","shapeRendering","dangerouslySetInnerHTML","__html","innerHTML","determineCornerType","d","getTailXOffset","getTailYOffset","getTailTransform","_this","unsortedSnakes","props","sortedSnakes","sort","viewBoxWidth","columns","viewBoxHeight","rows","maxWidth","maxHeight","_","row","col","theme","renderPart","f","foodIndex","cx","cy","r","renderGrid","Board","grid","streamAll","receive","Promise","resolve","reject","ws","WebSocket","addEventListener","e","obj","JSON","parse","data","close","loaded","getSvg","path","requireSvg","fetchSvg","_callee","response","svgText","svg","regenerator_default","wrap","_context","prev","fetch","sent","text","makeDom","abrupt","stop","wrapper","document","trim","firstChild","DEFAULT_SNAKE_HEAD","DEFAULT_SNAKE_TAIL","fetchResult","json","delay","millis","setTimeout","getAllSvgs","all","unique","Set","assignHeadAndTailUrls","getSnakeHeadSvgUrl","getSnakeTailSvgUrl","setHeadAndTailSvgs","_callee2","_context2","paths","t0","finish","isIllegalSvgPath","nameOrPath","indexOf","svgUrlFromName","base","relative","prepareFrame","_callee3","_context3","fetchGameInfo","baseUrl","gameId","get","fetchGameStart","_x5","_x6","_fetchGameStart","apply","_callee4","_context4","method","cache","streamAllFrames","_x7","_x8","_x9","_streamAllFrames","_callee6","receiveFrame","game","chain","onFrame","wsUrl","_context6","then","Object","asyncToGenerator","mark","_callee5","_context5","getFrameByTurn","frames","AvatarWrapper","styled","marginBottom","paddingTop","paddingBottom","display","HealthBarWrapper","background","borderRadius","HealthBar","_ref","backgroundColor","CauseOfDeath","_ref2","padding","fontSize","Avatar","getReadableCauseOfDeath","style","Wrapper","fontWeight","_templateObject","TurnCount","marginTop","Scoreboard","state","toggleHighlight","getSnakeToHighlight","highlightSnake","setState","_this2","aliveSnakes","deadSnakes","reverse","orderSnakes","scoreboard_AvatarWrapper","onClick","avatar","MediaControlsWrapper","hide","justifyContent","Button","mediaControls_templateObject","MediaControls","handleReload","reloadGame","handlePlayPause","toggleGamePause","handleBackward","stepBackwardFrame","handleForward","stepForwardFrame","handleKeyEvent","keyEvents","renderControls","_this$props","currentFrame","hideControls","paused","disabled","react_keyboard_event_handler_default","handleKeys","onKeyEvent","q","PageWrapper","game_templateObject","LoadingIndicator","alignItems","GameBoardWrapper","BoardWrapper","_ref3","flexDirection","hideScoreboard","ScoreboardWrapper","marginLeft","Game","options","boardTheme","engine","setEngineOptions","fetchFrames","invalidArgs","blank_state","renderGame","className","board","mediaControls","hideMediaControls","scoreboard","setCurrentFrame","windowPostMessage","msg","parent","postMessage","dispatch","getState","_getState$engineOptio","autoplay","engineUrl","gameTurn","engineOptions","parseInt","status","Status","playFromFrame","_x","_x2","frameRate","frameIndex","slicedFrames","ceiledFps","delayMillis","_frame3","lastFrame","slice","Math","ceil","_x3","_x4","search","arg","connect","gameStatus","_getState","_ref4","_getState2","_ref5","_getState3","nextFrame","stepToFrame","_x10","_ref6","_getState4","prevFrame","_x11","_x12","snakeId","middleware","applyMiddleware","thunkMiddleware","store","createStore","action","objectSpread","Height","Width","toConsumableArray","id","find","console","error","postHighlightMessage","render","es","app","getElementById"],"mappings":"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","file":"static/js/main.284786e8.chunk.js","sourcesContent":["const DEFAULT_HEAD_DIRECTION = \"up\";\n\nexport function formatFrame(frame) {\n  cleanFrame(frame);\n  const snakes = formatSnakes(frame.Snakes);\n  return {\n    turn: frame.Turn,\n    snakes: snakes,\n    food: formatPositions(frame.Food),\n    gameOver: isLastFrameOfGame(frame)\n  };\n}\n\nfunction formatSnakes(snakes) {\n  return snakes.map(formatSnake);\n}\n\nfunction formatSnake(snake) {\n  return {\n    body: snake.Body.map((p, i) => formatSnakePart(snake, i)),\n    color: snake.Color,\n    _id: snake.ID,\n    name: snake.Name,\n    health: snake.Health,\n    isDead: !!snake.Death,\n    death: formatDeath(snake.Death),\n    head: snake.Head,\n    tail: snake.Tail,\n    headSvg: snake.HeadSvg,\n    tailSvg: snake.TailSvg\n  };\n}\n\nfunction formatDeath(death) {\n  if (!death) {\n    return;\n  }\n\n  return {\n    cause: death.Cause,\n    turn: death.Turn || 0\n  };\n}\n\nfunction headDirection(snake) {\n  return snake.Body.length > 1\n    ? getDirection(snake.Body[1], snake.Body[0])\n    : DEFAULT_HEAD_DIRECTION;\n}\n\nfunction isCovered(snake, partIndex) {\n  const part = snake.Body[partIndex];\n  const next = snake.Body[partIndex - 1];\n\n  return next && next.X === part.X && next.Y === part.Y;\n}\n\nfunction formatSnakePart(snake, partIndex) {\n  const part = snake.Body[partIndex];\n  const next = snake.Body[partIndex - 1];\n  return {\n    direction: next ? getDirection(part, next) : headDirection(snake),\n    shouldRender: !isCovered(snake, partIndex),\n    type: getType(snake, partIndex),\n    x: part.X,\n    y: part.Y\n  };\n}\n\nfunction formatPositions(positions) {\n  return positions.map(formatPosition);\n}\n\nfunction formatPosition(pos) {\n  return {\n    x: pos.X,\n    y: pos.Y\n  };\n}\n\nfunction getDirection(a, b) {\n  if (a.X < b.X) {\n    return \"right\";\n  } else if (b.X < a.X) {\n    return \"left\";\n  } else if (a.Y < b.Y) {\n    return \"down\";\n  }\n  return \"up\";\n}\n\nfunction getType(snake, partIndex) {\n  if (partIndex === 0) {\n    return \"head\";\n  }\n\n  if (partIndex === snake.Body.length - 1) {\n    return \"tail\";\n  }\n\n  return \"body\";\n}\n\n// This is a workaround for fields that are omitted when they have the default\n// value. ie: int fields that need to default to 0 rather than undefined.\nfunction cleanFrame(frame) {\n  frame.Turn = frame.Turn || 0;\n\n  for (const snake of frame.Snakes) {\n    for (const part of snake.Body) {\n      part.X = part.X || 0;\n      part.Y = part.Y || 0;\n    }\n  }\n\n  for (const food of frame.Food) {\n    food.X = food.X || 0;\n    food.Y = food.Y || 0;\n  }\n}\n\nfunction oneLeft(snakes) {\n  const alive = snakes.filter(s => !s.death);\n  return alive.length <= 1;\n}\n\nexport function isLastFrameOfGame(frame) {\n  const snakes = formatSnakes(frame.Snakes);\n\n  if (snakes.length === 0) {\n    return true;\n  }\n\n  if (snakes.length === 1) {\n    return !!snakes[0].death;\n  }\n\n  return oneLeft(snakes);\n}\n","// Creates a dictionary of parameters based on the given query string. q should\n// look like \"?foo=bar&thing=blah\".\nexport function parseQueryString(q) {\n  if (!q || !q.length) {\n    return {};\n  }\n\n  // Array of key/value pairs\n  const args = q\n    .substr(1)\n    .split(\"&\")\n    .map(parseArg);\n\n  // Convert to object\n  return args.reduce((result, arg) => {\n    result[arg.key] = arg.value;\n    return result;\n  }, {});\n}\n\n// Converts \"asdf=qwer\" to { asdf: \"qwer\" } or \"asdf\" to { asdf: true }. The\n// latter example is to allow switch-like parameters like ?enableThing without\n// an equals sign.\nfunction parseArg(a) {\n  const parts = a.split(\"=\");\n  const key = parts[0];\n  const value = parts[1] === undefined ? true : decodeURIComponent(parts[1]);\n  return { key, value };\n}\n\n// Converts { a: \"aaa\", b: \"bbb\" } to \"?a=aaa&b=bbb\"\nexport function makeQueryString(query) {\n  if (!query) {\n    return \"\";\n  }\n\n  let sep = \"?\";\n  let result = \"\";\n\n  for (const key in query) {\n    const value = query[key];\n    result += `${sep}${key}=${value}`;\n    sep = \"&\";\n  }\n\n  return result;\n}\n\n// Converts http://foo to ws://foo or https://foo to wss://foo\nexport function httpToWsProtocol(url) {\n  const mappings = {\n    http: \"ws\",\n    https: \"wss\"\n  };\n\n  for (const from in mappings) {\n    const to = mappings[from];\n    if (url.substr(0, from.length + 1) === from + \":\") {\n      return to + url.substr(from.length);\n    }\n  }\n\n  throw new Error(\"Invalid URL: \" + url);\n}\n\n// Joins path components and makes sure there is exactly one '/' separating\n// them.\nexport function join(...parts) {\n  function joinPair(a, b) {\n    const cleanA = a.replace(/\\/+$/, \"\");\n    const cleanB = b.replace(/^\\/+/, \"\");\n\n    if (cleanA === \"\") {\n      return cleanB;\n    }\n\n    if (cleanB === \"\") {\n      return cleanA;\n    }\n\n    return `${cleanA}/${cleanB}`;\n  }\n\n  return parts.reduce((current, next) => joinPair(current, next), \"\");\n}\n","import React from \"react\";\n\nclass BlankState extends React.Component {\n  render() {\n    return (\n      <div>\n        To run a game you need to specify engine and game parameters in the URL.\n        For example:\n        <pre>\n          {window.location.origin}?engine=&lt;ENGINE_URL&gt;&amp;game=&lt;GAME_ID&gt;\n        </pre>\n      </div>\n    );\n  }\n}\n\nexport default BlankState;\n","export const colors = {\n  // Page\n  pageBackground: \"transparent\",\n\n  // Grid\n  gridDot: \"#6a208f\",\n  food: \"#ff5c75\",\n\n  // Scoreboard\n  healthBar: \"#0f0\",\n  healthBarBackground: \"#fefefe\",\n  healthBarOutline: \"#666\",\n  healthBarDeathBackground: \"#f1f1f1\",\n  healthBarDeathBackgroundDark: \"#bbb\",\n\n  // Misc\n  lightText: \"#efefef\",\n  darkText: \"#222\",\n\n  // Colour names (from theme)\n  blue: \"#007bff\",\n  indigo: \"#6610f2\",\n  purple: \"#6f42c1\",\n  pink: \"#e83e8c\",\n  red: \"#dc3545\",\n  orange: \"#fd7e14\",\n  yellow: \"#ffc107\",\n  green: \"#28a745\",\n  teal: \"#20c997\",\n  cyan: \"#17a2b8\",\n  white: \"#fff\",\n  gray: \"#6c757d\",\n  grayLight: \"#f1f1f1\",\n  grayDark: \"#343a40\",\n  primary: \"#007bff\",\n  secondary: \"#6c757d\",\n  success: \"#28a745\",\n  info: \"#17a2b8\",\n  warning: \"#ffc107\",\n  danger: \"#dc3545\",\n  light: \"#f8f9fa\",\n  dark: \"#343a40\"\n\n  // OLD\n  // orange: \"#ffa500\",\n  // purple: \"#240458\",\n};\n\nexport const themes = {\n  // Themes\n  dark: \"dark\",\n  light: \"light\"\n};\n","import React from \"react\";\nimport { colors, themes } from \"../theme\";\n\nconst HIGHLIGHT_DIM = 0.25;\nconst DARK_DIM = 0.75;\nconst DEAD_OPACITY = 0.1;\nconst CELL_SIZE = 20;\nconst CELL_SPACING = 4;\n\nfunction toGridSpace(slot) {\n  return (CELL_SIZE + CELL_SPACING) * slot + CELL_SPACING;\n}\n\nfunction getPartWidth(part) {\n  const extraWidth =\n    part.direction === \"left\" || part.direction === \"right\" ? CELL_SPACING : 0;\n  return CELL_SIZE + extraWidth;\n}\n\nfunction getPartHeight(part) {\n  const extraHeight =\n    part.direction === \"up\" || part.direction === \"down\" ? CELL_SPACING : 0;\n  return CELL_SIZE + extraHeight;\n}\n\nfunction getPartXOffset(part) {\n  const xBias = part.direction === \"left\" ? -CELL_SPACING : 0;\n  return toGridSpace(part.x) + xBias;\n}\n\nfunction getPartYOffset(part) {\n  const yBias = part.direction === \"up\" ? -CELL_SPACING : 0;\n  return toGridSpace(part.y) + yBias;\n}\n\nfunction getTailXOffset(part) {\n  switch (part.direction) {\n    case \"left\":\n      return toGridSpace(part.x) - CELL_SPACING;\n    case \"right\":\n      return toGridSpace(part.x) + CELL_SPACING;\n    default:\n      return toGridSpace(part.x);\n  }\n}\n\nfunction getTailYOffset(part) {\n  switch (part.direction) {\n    case \"up\":\n      return toGridSpace(part.y) - CELL_SPACING;\n    case \"down\":\n      return toGridSpace(part.y) + CELL_SPACING;\n    default:\n      return toGridSpace(part.y);\n  }\n}\n\nfunction getHeadXOffset(part) {\n  switch (part.direction) {\n    case \"left\":\n      return toGridSpace(part.x);\n    case \"right\":\n      return toGridSpace(part.x);\n    default:\n      return toGridSpace(part.x);\n  }\n}\n\nfunction getHeadYOffset(part) {\n  switch (part.direction) {\n    case \"up\":\n      return toGridSpace(part.y);\n    case \"down\":\n      return toGridSpace(part.y);\n    default:\n      return toGridSpace(part.y);\n  }\n}\n\nfunction getOpacity(snake, highlightedSnake) {\n  if (highlightedSnake) {\n    return snake._id === highlightedSnake ? 1 : HIGHLIGHT_DIM;\n  }\n\n  return snake.isDead ? DEAD_OPACITY : 1;\n}\n\nfunction range(size) {\n  const result = [];\n  for (let i = 0; i < size; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\nfunction sortAliveSnakesOnTop(snakes) {\n  return snakes.concat().sort((a, b) => {\n    const aOrder = a.isDead ? 0 : 1;\n    const bOrder = b.isDead ? 0 : 1;\n    return aOrder - bOrder;\n  });\n}\n\nfunction getHeadTransform(direction, viewBox) {\n  const halfX = viewBox.width / 2;\n  const halfY = viewBox.height / 2;\n  switch (direction) {\n    case \"left\":\n      return `rotate(180 ${halfX} ${halfY})`;\n    case \"up\":\n      return `rotate(-90 ${halfX} ${halfY})`;\n    case \"down\":\n      return `rotate(90 ${halfX} ${halfY})`;\n    default:\n      return \"\";\n  }\n}\n\nfunction getTailTransform(direction, viewBox) {\n  const halfX = viewBox.width / 2;\n  const halfY = viewBox.height / 2;\n  switch (direction) {\n    case \"right\":\n      return `rotate(180 ${halfX} ${halfY})`;\n    case \"down\":\n      return `rotate(-90 ${halfX} ${halfY})`;\n    case \"up\":\n      return `rotate(90 ${halfX} ${halfY})`;\n    default:\n      return \"\";\n  }\n}\n\nfunction checkIfCornerPart(snake, partIndex) {\n  // If head or tail of the snake, then false\n  if (partIndex === 0 || partIndex === snake.body.length - 1) return false;\n\n  const behind = snake.body[partIndex + 1];\n  const current = snake.body[partIndex];\n\n  // Return false if the behind part has the same position as the current.\n  // Relevant for when the snake initially spawns.\n  if (behind.x === current.x && behind.y === current.y) return false;\n\n  return behind.direction !== current.direction;\n}\n\nfunction determineCornerType(snake, partIndex) {\n  // If head or tail of the snake, then false\n  if (partIndex === 0 || partIndex === snake.body.length - 1) return false;\n\n  const behind = snake.body[partIndex + 1];\n  const current = snake.body[partIndex];\n\n  return `${current.direction} ${behind.direction}`;\n}\n\nclass Grid extends React.Component {\n  renderPart(snake, snakeIndex, part, partIndex, highlightedSnake) {\n    switch (part.type) {\n      case \"head\":\n        return this.renderHeadPart(snake, snakeIndex, part, highlightedSnake);\n      case \"tail\":\n        return this.renderTailPart(snake, snakeIndex, part, highlightedSnake);\n      default:\n        if (checkIfCornerPart(snake, partIndex)) {\n          return this.renderCornerPart(\n            snake,\n            snakeIndex,\n            part,\n            partIndex,\n            highlightedSnake\n          );\n        } else {\n          return this.renderMiddlePart(\n            snake,\n            snakeIndex,\n            part,\n            partIndex,\n            highlightedSnake\n          );\n        }\n    }\n  }\n\n  renderHeadPart(snake, snakeIndex, part, highlighted) {\n    const x = getHeadXOffset(part);\n    const y = getHeadYOffset(part);\n    const box = snake.headSvg.viewBox.baseVal;\n    const transform = getHeadTransform(part.direction, box);\n    const viewBoxStr = `${box.x} ${box.y} ${box.width} ${box.height}`;\n\n    return (\n      <svg\n        key={\"part\" + snakeIndex + \",head\"}\n        viewBox={viewBoxStr}\n        x={x}\n        y={y}\n        width={CELL_SIZE}\n        height={CELL_SIZE}\n        fill={snake.color}\n        opacity={getOpacity(snake, highlighted)}\n        shapeRendering=\"optimizeSpeed\"\n      >\n        <g\n          transform={transform}\n          dangerouslySetInnerHTML={{ __html: snake.headSvg.innerHTML }}\n        />\n      </svg>\n    );\n  }\n\n  renderMiddlePart(snake, snakeIndex, part, partIndex, highlighted) {\n    if (!part.shouldRender) {\n      return <svg key={\"part\" + snakeIndex + \",\" + partIndex} />;\n    }\n\n    return (\n      <rect\n        key={`part${snakeIndex},${part.x},${part.y}`}\n        x={getPartXOffset(part)}\n        y={getPartYOffset(part)}\n        width={getPartWidth(part)}\n        height={getPartHeight(part)}\n        fill={snake.color}\n        opacity={getOpacity(snake, highlighted)}\n        shapeRendering=\"optimizeSpeed\"\n      />\n    );\n  }\n\n  renderCornerPart(snake, snakeIndex, part, partIndex, highlighted) {\n    if (!part.shouldRender) {\n      return (\n        <svg\n          key={`part${snakeIndex},${part.x},${part.y}`}\n          shapeRendering=\"optimizeSpeed\"\n        />\n      );\n    }\n\n    let viewBox, transform;\n    let path = \"M0,0 h40 a60,60 0 0 1 61,60 v81 h-101 z\";\n\n    switch (part.direction) {\n      case \"left\":\n      case \"right\":\n        viewBox = \"0 0 120 100\";\n        break;\n      case \"up\":\n      case \"down\":\n      default:\n        viewBox = \"0 0 100 120\";\n        break;\n    }\n\n    switch (determineCornerType(snake, partIndex)) {\n      case \"down left\":\n        transform = \"scale(-1,1) translate(-100, 0)\";\n        break;\n      case \"left down\":\n        transform = \"rotate(90,0,0) translate(0,-120)\";\n        break;\n      case \"right down\":\n        transform = \"rotate(90,0,0) scale(1,-1)\";\n        break;\n      case \"up right\":\n        transform = \"scale(1,-1) translate(0,-120)\";\n        break;\n      case \"up left\":\n        transform = \"scale(-1,-1) translate(-100,-120)\";\n        break;\n      case \"right up\":\n        transform = \"rotate(-90,0,0) translate(-100,0)\";\n        break;\n      case \"left up\":\n        transform = \"rotate(-90,0,0) scale(1,-1) translate(-100,-120)\";\n        break;\n      case \"down right\":\n      default:\n        break;\n    }\n\n    return (\n      <svg\n        key={`part${snakeIndex},${part.x},${part.y}`}\n        x={getPartXOffset(part)}\n        y={getPartYOffset(part)}\n        width={getPartWidth(part)}\n        height={getPartHeight(part)}\n        opacity={getOpacity(snake, highlighted)}\n        fill={snake.color}\n        viewBox={viewBox}\n        shapeRendering=\"optimizeSpeed\"\n      >\n        <path d={path} transform={transform} />\n      </svg>\n    );\n  }\n\n  renderTailPart(snake, snakeIndex, part, highlighted) {\n    const x = getTailXOffset(part);\n    const y = getTailYOffset(part);\n    const box = snake.tailSvg.viewBox.baseVal;\n    const transform = getTailTransform(part.direction, box);\n    const viewBoxStr = `${box.x} ${box.y} ${box.width} ${box.height}`;\n\n    if (!part.shouldRender) {\n      return <svg key={\"part\" + snakeIndex + \",tail\"} />;\n    }\n\n    return (\n      <svg\n        key={\"part\" + snakeIndex + \",tail\"}\n        viewBox={viewBoxStr}\n        x={x}\n        y={y}\n        width={CELL_SIZE}\n        height={CELL_SIZE}\n        fill={snake.color}\n        opacity={getOpacity(snake, highlighted)}\n        shapeRendering=\"optimizeSpeed\"\n      >\n        <g\n          transform={transform}\n          dangerouslySetInnerHTML={{ __html: snake.tailSvg.innerHTML }}\n        />\n      </svg>\n    );\n  }\n\n  renderGrid() {\n    const unsortedSnakes = this.props.snakes || [];\n    const food = this.props.food || [];\n\n    // Make alive snakes render on top of dead snakes\n    const sortedSnakes = sortAliveSnakesOnTop(unsortedSnakes);\n\n    const viewBoxWidth = toGridSpace(this.props.columns);\n    const viewBoxHeight = toGridSpace(this.props.rows);\n\n    return (\n      <svg\n        width={this.props.maxWidth}\n        height={this.props.maxHeight}\n        x={this.props.x}\n        y={this.props.y}\n        viewBox={`0 0 ${viewBoxWidth} ${viewBoxHeight}`}\n      >\n        {range(this.props.rows).map((_, row) =>\n          range(this.props.columns).map((_, col) => (\n            <rect\n              key={\"cell\" + row + \",\" + col}\n              x={toGridSpace(col)}\n              y={toGridSpace(row)}\n              width={CELL_SIZE}\n              height={CELL_SIZE}\n              fill={\n                this.props.theme === themes.dark ? \"#ddd\" : colors.grayLight\n              }\n              opacity={\n                this.props.highlightedSnake\n                  ? HIGHLIGHT_DIM\n                  : this.props.theme === themes.dark\n                  ? DARK_DIM\n                  : null\n              }\n              shapeRendering=\"optimizeSpeed\"\n            />\n          ))\n        )}\n\n        {sortedSnakes.map((snake, snakeIndex) => {\n          return snake.body.map((part, partIndex) =>\n            this.renderPart(\n              snake,\n              snakeIndex,\n              part,\n              partIndex,\n              this.props.highlightedSnake\n            )\n          );\n        })}\n\n        {food.map((f, foodIndex) => (\n          <circle\n            key={\"food\" + foodIndex}\n            cx={toGridSpace(f.x) + CELL_SIZE / 2}\n            cy={toGridSpace(f.y) + CELL_SIZE / 2}\n            r={CELL_SIZE / 3.25}\n            fill={colors.food}\n            opacity={this.props.highlightedSnake ? HIGHLIGHT_DIM : null}\n            shapeRendering=\"optimizeQuality\"\n          />\n        ))}\n      </svg>\n    );\n  }\n\n  render() {\n    if (this.props.snakes) {\n      return this.renderGrid();\n    } else {\n      return;\n    }\n  }\n}\n\nexport default Grid;\n","import React from \"react\";\nimport Grid from \"./grid\";\n\nconst BOARD_SIZE = 100;\n\nclass Board extends React.Component {\n  render() {\n    return (\n      <svg viewBox={`0 0 ${BOARD_SIZE} ${BOARD_SIZE}`}>\n        <Grid\n          snakes={this.props.snakes}\n          food={this.props.food}\n          columns={this.props.columns}\n          rows={this.props.rows}\n          highlightedSnake={this.props.highlightedSnake}\n          theme={this.props.theme}\n          maxWidth={BOARD_SIZE}\n          maxHeight={BOARD_SIZE}\n          x={0}\n          y={0}\n        />\n      </svg>\n    );\n  }\n}\n\nexport default Board;\n","// Establishes websocket connection on given url and then calls receive for\n// every object sent from the server. Returns a promise that resolves when\n// receive returns true or when the server closes the connection.\nexport function streamAll(url, receive) {\n  let done = false;\n\n  return new Promise((resolve, reject) => {\n    const ws = new WebSocket(url);\n    ws.addEventListener(\"message\", e => {\n      const obj = JSON.parse(e.data);\n      done = receive(obj);\n      if (done) {\n        ws.close();\n        resolve();\n      }\n    });\n\n    ws.addEventListener(\"onerror\", e => {\n      reject(e);\n    });\n\n    ws.addEventListener(\"onclose\", e => {\n      if (!done) {\n        done = true;\n        resolve();\n      }\n    });\n  });\n}\n","/**\n * This file contains helper functions for async loading svg files that\n * can be injected inline into an html <svg> element. This is better than\n * alternatives for the following reasons:\n *\n *    <use href=\"...\"> has a problem where the game could start before the\n *    svg has finished loading whereas this method gives a promise we can wait\n *    for.\n *\n *    <image src=\"...\"> has a problem where the fill color of the image cannot\n *    be overriden. Inline svg solves this problem and allows css styles to\n *    cascade into the svg content. <use> may also have this problem?\n *\n *    Directly embedding the svg xml into react components (or similar) would\n *    mostly solve everything except that it eliminates the possibility of\n *    pulling in svg data from external trusted sources.\n *\n * The main downside to this method is that the source of the svg must be\n * trusted or else you are vulnerable to xss attacks.\n */\n\nconst loaded = {};\n\nexport function loadSvgs(paths) {\n  return Promise.all(paths.map(requireSvg));\n}\n\nexport function getSvg(path) {\n  return loaded[path];\n}\n\nfunction requireSvg(path) {\n  if (path in loaded) {\n    return Promise.resolve(loaded[path]);\n  }\n\n  return fetchSvg(path);\n}\n\nasync function fetchSvg(path) {\n  const response = await fetch(path);\n  const svgText = await response.text();\n  const svg = makeDom(svgText);\n  loaded[path] = svg;\n  return svg;\n}\n\nfunction makeDom(svgText) {\n  const wrapper = document.createElement(\"div\");\n  wrapper.innerHTML = svgText.trim();\n  return wrapper.firstChild;\n}\n","import { streamAll } from \"../io/websocket\";\nimport { makeQueryString, httpToWsProtocol, join } from \"./url\";\nimport { loadSvgs, getSvg } from \"./inline-svg\";\nimport { isLastFrameOfGame } from \"./game-state\";\n\nconst DEFAULT_SNAKE_HEAD = \"tongue\";\nconst DEFAULT_SNAKE_TAIL = \"bolt\";\n\nasync function get(url, query) {\n  const fetchResult = await fetch(url + makeQueryString(query));\n  return fetchResult.json();\n}\n\nexport function delay(millis) {\n  return new Promise(resolve => setTimeout(resolve, millis));\n}\n\nexport function getReadableCauseOfDeath(cause) {\n  // Based on https://github.com/battlesnakeio/engine/blob/master/rules/death_cause.go\n\n  switch (cause) {\n    case \"snake-collision\":\n      return \"Collided with snake body\";\n    case \"snake-self-collision\":\n      return \"Collided with own body\";\n    case \"starvation\":\n      return \"Starvation\";\n    case \"head-collision\":\n      return \"Head on head collision\";\n    case \"wall-collision\":\n      return \"Collided with a wall\";\n    default:\n      return cause;\n  }\n}\n\n// Gets a list of all unique SVG paths required by the snakes.\nfunction getAllSvgs(snakes) {\n  const all = snakes.reduce((result, snake) => {\n    return result.concat([snake.Head, snake.Tail]);\n  }, []);\n  const unique = new Set(all);\n  return Array.from(unique);\n}\n\nfunction assignHeadAndTailUrls(snakes) {\n  for (const snake of snakes) {\n    // Assign default if missing\n    if (!snake.Head) {\n      snake.Head = DEFAULT_SNAKE_HEAD;\n    }\n    if (!snake.Tail) {\n      snake.Tail = DEFAULT_SNAKE_TAIL;\n    }\n\n    // Format as actual URL if it's just a name\n    snake.Head = getSnakeHeadSvgUrl(snake.Head);\n    snake.Tail = getSnakeTailSvgUrl(snake.Tail);\n  }\n}\n\nasync function setHeadAndTailSvgs(snakes) {\n  assignHeadAndTailUrls(snakes);\n  await loadSvgs(getAllSvgs(snakes));\n\n  for (const snake of snakes) {\n    snake.HeadSvg = getSvg(snake.Head);\n    snake.TailSvg = getSvg(snake.Tail);\n  }\n}\n\nfunction isIllegalSvgPath(nameOrPath) {\n  return nameOrPath.indexOf(\"/\") >= 0 || nameOrPath.indexOf(\".\") >= 0;\n}\n\nfunction svgUrlFromName(base, relative) {\n  return join(base, relative) + \".svg\";\n}\n\nfunction getSnakeHeadSvgUrl(path) {\n  const effectivePath = isIllegalSvgPath(path) ? DEFAULT_SNAKE_HEAD : path;\n  return svgUrlFromName(\"images/snake/head\", effectivePath);\n}\n\nfunction getSnakeTailSvgUrl(path) {\n  const effectivePath = isIllegalSvgPath(path) ? DEFAULT_SNAKE_TAIL : path;\n  return svgUrlFromName(\"images/snake/tail\", effectivePath);\n}\n\nasync function prepareFrame(frame) {\n  await setHeadAndTailSvgs(frame.Snakes);\n}\n\nexport function fetchGameInfo(baseUrl, gameId) {\n  const url = join(baseUrl, `games/${gameId}`);\n  return get(url);\n}\n\nexport async function fetchGameStart(baseUrl, gameId) {\n  const url = join(baseUrl, `games/${gameId}/start`);\n  // Only returns a 200 OK with no data, don't need to deal with the response\n  await fetch(url, {\n    method: \"POST\",\n    cache: \"no-cache\"\n  });\n}\n\nexport async function streamAllFrames(baseUrl, gameId, receiveFrame) {\n  const game = await fetchGameInfo(baseUrl, gameId);\n\n  let chain = Promise.resolve();\n  function onFrame(frame) {\n    chain = chain.then(async () => {\n      await prepareFrame(frame);\n      return receiveFrame(game, frame);\n    });\n    return isLastFrameOfGame(frame);\n  }\n\n  const wsUrl = join(httpToWsProtocol(baseUrl), `socket/${gameId}`);\n  await streamAll(wsUrl, onFrame);\n  await chain;\n}\n\nexport function getFrameByTurn(frames, turn) {\n  return frames.filter(frame => frame.turn === turn)[0];\n}\n","import React from \"react\";\nimport styled from \"react-emotion\";\nimport { colors, themes } from \"../theme\";\nimport { getReadableCauseOfDeath } from \"../utils/engine-client\";\n\nconst AvatarWrapper = styled(\"div\")({\n  marginBottom: \".5rem\",\n  paddingTop: \"1rem\",\n  width: \"100%\",\n  paddingBottom: \"1rem\"\n});\n\nconst Name = styled(\"span\")({\n  display: \"block\",\n  paddingBottom: \"1rem\"\n});\n\nconst HealthBarWrapper = styled(\"div\")({\n  width: \"100%\",\n  height: \"1.8rem\",\n  background: colors.healthBarBackground,\n  borderRadius: \"1.5rem\"\n});\n\nconst HealthBar = styled(\"div\")(({ color }) => ({\n  height: \"100%\",\n  backgroundColor: color,\n  borderRadius: \"inherit\"\n}));\n\nconst CauseOfDeath = styled(\"div\")(({ theme }) => ({\n  height: \"100%\",\n  padding: \".2rem .5rem\",\n  fontSize: \"1.2rem\",\n  backgroundColor:\n    theme === themes.dark\n      ? colors.healthBarDeathBackgroundDark\n      : colors.healthBarDeathBackground,\n  borderRadius: \"inherit\",\n  color: colors.darkText\n}));\n\nclass Avatar extends React.Component {\n  render() {\n    return (\n      <AvatarWrapper>\n        <Name>{this.props.snake.name}</Name>\n        <HealthBarWrapper>\n          {this.props.snake.death ? (\n            <CauseOfDeath theme={this.props.theme}>\n              {getReadableCauseOfDeath(this.props.snake.death.cause)}\n            </CauseOfDeath>\n          ) : (\n            <HealthBar\n              color={this.props.snake.color}\n              style={{\n                width: `${this.props.snake.health}%`\n              }}\n            />\n          )}\n        </HealthBarWrapper>\n      </AvatarWrapper>\n    );\n  }\n}\n\nexport default Avatar;\n","import React from \"react\";\nimport styled from \"react-emotion\";\nimport Avatar from \"./avatar\";\nimport { colors, themes } from \"../theme\";\n\nconst orderSnakes = snakes => {\n  // Sort by name\n  const aliveSnakes = snakes\n    .filter(s => !s.isDead)\n    .sort((a, b) => {\n      if (a.name < b.name) {\n        return -1;\n      }\n      if (a.name > b.name) {\n        return 1;\n      }\n      return 0;\n    });\n\n  // Sort by turn died, descending\n  const deadSnakes = snakes\n    .filter(s => s.isDead)\n    .sort((a, b) => a.death.turn - b.death.turn)\n    .reverse();\n\n  return aliveSnakes.concat(deadSnakes);\n};\n\nconst Wrapper = styled(\"div\")(({ theme }) => ({\n  color: theme === themes.dark ? colors.lightText : colors.darkText,\n  fontWeight: 700,\n  fontSize: \"2.4rem\"\n}));\n\nconst AvatarWrapper = styled(\"div\")`\n  transition: background-color 0.2s, box-shadow 0.2s;\n  box-shadow: ${props =>\n    props.highlighted ? `0 0 0 1px ${colors.lightText}` : null};\n\n  &:hover {\n    background-color: ${props =>\n      props.theme === themes.dark ? colors.purple : colors.light};\n    cursor: pointer;\n  }\n`;\n\nconst TurnCount = styled(\"div\")({\n  width: \"100%\",\n  marginTop: \"1rem\",\n  marginBottom: \"1rem\"\n});\n\nclass Scoreboard extends React.Component {\n  state = {\n    highlightedSnake: null\n  };\n\n  toggleHighlight = snake => {\n    const getSnakeToHighlight = (state, snake) => {\n      return state.highlightedSnake !== snake._id ? snake._id : null;\n    };\n\n    this.props.highlightSnake(getSnakeToHighlight(this.state, snake));\n\n    this.setState(state => ({\n      highlightedSnake: getSnakeToHighlight(state, snake)\n    }));\n  };\n\n  render() {\n    const { highlightedSnake } = this.state;\n    return (\n      <Wrapper theme={this.props.theme}>\n        <TurnCount>Turn: {this.props.turn}</TurnCount>\n        {this.props.snakes\n          ? orderSnakes(this.props.snakes).map((snake, i) => (\n              <AvatarWrapper\n                key={\"avatarwrapper\" + i}\n                onClick={() => this.toggleHighlight(snake)}\n                highlighted={highlightedSnake === snake._id}\n                theme={this.props.theme}\n              >\n                <Avatar\n                  snake={snake}\n                  key={\"avatar\" + i}\n                  theme={this.props.theme}\n                />\n              </AvatarWrapper>\n            ))\n          : undefined}\n      </Wrapper>\n    );\n  }\n}\n\nexport default Scoreboard;\n","import React from \"react\";\nimport styled from \"react-emotion\";\nimport KeyboardEventHandler from \"react-keyboard-event-handler\";\n\nconst MediaControlsWrapper = styled(\"div\")(({ hide }) => ({\n  display: hide ? \"none\" : \"flex\",\n  justifyContent: \"center\",\n  padding: \"2rem 0\",\n  width: \"100%\"\n}));\n\nconst Button = styled(\"button\")`\n  display: inline-block;\n  min-width: 10rem;\n  padding: 0.5rem 1rem;\n  margin: 0 0.5rem;\n  border: solid 1px #bbb;\n  border-radius: 5px;\n  background: #efefef;\n  color: #333;\n  font-size: 2rem;\n  text-decoration: none;\n  text-align: center;\n  cursor: pointer;\n  transition: background 250ms ease-in-out, transform 150ms ease;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n\n  &:hover {\n    background: #dfdfdf;\n  }\n\n  &:focus {\n    outline: none;\n  }\n\n  &:disabled {\n    color: #ccc;\n    cursor: not-allowed;\n  }\n\n  &:disabled:hover {\n    background: #efefef;\n  }\n`;\n\nclass MediaControls extends React.Component {\n  componentWillMount() {\n    this.keyEvents = [\"r\", \"left\", \"right\", \"space\"];\n  }\n\n  render() {\n    return this.renderControls();\n  }\n\n  handleReload = () => {\n    this.props.reloadGame();\n  };\n\n  handlePlayPause = () => {\n    this.props.toggleGamePause();\n  };\n\n  handleBackward = () => {\n    this.props.stepBackwardFrame();\n  };\n\n  handleForward = () => {\n    this.props.stepForwardFrame();\n  };\n\n  handleKeyEvent = key => {\n    switch (key) {\n      case \"r\":\n        this.handleReload();\n        break;\n      case \"left\":\n        this.handleBackward();\n        break;\n      case \"right\":\n        this.handleForward();\n        break;\n      case \"space\":\n        this.handlePlayPause();\n        break;\n      default:\n        break;\n    }\n  };\n\n  renderControls() {\n    const { currentFrame, hideControls, paused } = this.props;\n\n    return (\n      <MediaControlsWrapper hide={hideControls}>\n        <Button\n          onClick={this.handleReload}\n          disabled={currentFrame.turn === 0 || !paused}\n        >\n          Reload\n        </Button>\n        <Button onClick={this.handlePlayPause}>\n          {paused ? \"Play\" : \"Pause\"}\n        </Button>\n        <Button onClick={this.handleBackward} disabled={!paused}>\n          Backward\n        </Button>\n        <Button onClick={this.handleForward} disabled={!paused}>\n          Forward\n        </Button>\n        <KeyboardEventHandler\n          handleKeys={this.keyEvents}\n          onKeyEvent={this.handleKeyEvent}\n        />\n      </MediaControlsWrapper>\n    );\n  }\n}\n\nexport default MediaControls;\n","import React from \"react\";\nimport styled from \"react-emotion\";\n\nimport BlankState from \"./blank-state\";\nimport Board from \"./board\";\nimport Scoreboard from \"./scoreboard\";\nimport MediaControls from \"./mediaControls\";\nimport { colors, themes } from \"../theme\";\n\nconst PageWrapper = styled(\"div\")`\n  position: relative;\n  height: 100%;\n  width: 100%;\n  background: ${({ theme }) =>\n    theme === themes.dark ? colors.purple : \"transparent\"};\n  background: ${({ theme }) =>\n    theme === themes.dark\n      ? `linear-gradient(45deg, #000 0%, ${colors.purple} 100%)`\n      : \"transparent\"};\n`;\n\nconst LoadingIndicator = styled(\"div\")({\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  height: \"100%\",\n  width: \"100%\"\n});\n\nconst GameBoardWrapper = styled(\"div\")({\n  display: \"flex\",\n  justifyContent: \"space-between\",\n  padding: \"0 2rem\",\n  width: \"100%\",\n  height: \"100%\"\n});\n\nconst BoardWrapper = styled(\"div\")(({ hideScoreboard }) => ({\n  display: \"flex\",\n  flexDirection: \"column\",\n  width: hideScoreboard ? \"100%\" : \"65vw\",\n  height: \"100%\"\n}));\n\nconst ScoreboardWrapper = styled(\"div\")({\n  width: \"35vw\",\n  marginLeft: \"2rem\"\n});\n\nclass Game extends React.Component {\n  componentWillMount() {\n    const { options } = this.props;\n\n    this.theme = this.props.options.boardTheme\n      ? this.props.options.boardTheme\n      : themes.light;\n\n    if (options.game && options.engine) {\n      this.hideScoreboard = this.props.options.hideScoreboard === \"true\";\n      this.props.setEngineOptions(options);\n      this.props.fetchFrames();\n    } else {\n      this.invalidArgs = true;\n    }\n  }\n\n  render() {\n    if (this.invalidArgs) {\n      return <BlankState />;\n    }\n\n    if (this.props.currentFrame) {\n      return this.renderGame();\n    }\n\n    return (\n      <LoadingIndicator>\n        <div\n          className=\"la-ball-grid-beat la-dark la-2x\"\n          style={{\n            color: colors.food\n          }}\n        >\n          <div />\n          <div />\n          <div />\n          <div />\n          <div />\n          <div />\n          <div />\n          <div />\n          <div />\n        </div>\n      </LoadingIndicator>\n    );\n  }\n\n  renderGame() {\n    return (\n      <PageWrapper theme={this.theme}>\n        <GameBoardWrapper>\n          <BoardWrapper hideScoreboard={this.hideScoreboard}>\n            <Board\n              snakes={this.props.currentFrame.snakes}\n              food={this.props.currentFrame.food}\n              columns={this.props.grid.width}\n              rows={this.props.grid.height}\n              highlightedSnake={this.props.highlightedSnake}\n              theme={this.theme}\n            />\n            <MediaControls\n              currentFrame={this.props.currentFrame}\n              hideControls={this.props.options.hideMediaControls === \"true\"}\n              reloadGame={this.props.reloadGame}\n              toggleGamePause={this.props.toggleGamePause}\n              stepBackwardFrame={this.props.stepBackwardFrame}\n              stepForwardFrame={this.props.stepForwardFrame}\n              paused={this.props.paused}\n            />\n          </BoardWrapper>\n          {!this.hideScoreboard && (\n            <ScoreboardWrapper>\n              <Scoreboard\n                turn={this.props.currentFrame.turn}\n                snakes={this.props.currentFrame.snakes}\n                food={this.props.currentFrame.food}\n                highlightSnake={this.props.highlightSnake}\n                theme={this.theme}\n              />\n            </ScoreboardWrapper>\n          )}\n        </GameBoardWrapper>\n      </PageWrapper>\n    );\n  }\n}\n\nexport default Game;\n","import {\n  delay,\n  fetchGameStart,\n  getFrameByTurn,\n  streamAllFrames\n} from \"../utils/engine-client\";\n\nconst DEFAULT_FPS = 20;\n\nexport const setEngineOptions = engineOptions => ({\n  type: \"SET_ENGINE_OPTIONS\",\n  engineOptions\n});\n\nexport const gameOver = () => ({\n  type: \"GAME_OVER\"\n});\n\nexport const requestFrames = () => ({\n  type: \"REQUEST_FRAMES\"\n});\n\nexport const receiveFrame = (game, frame) => ({\n  type: \"RECEIVE_FRAME\",\n  game,\n  frame\n});\n\nexport const setCurrentFrame = frame => ({\n  type: \"SET_CURRENT_FRAME\",\n  frame\n});\n\nexport const setGameStatus = status => ({\n  type: \"SET_GAME_STATUS\",\n  status\n});\n\nexport const pauseGame = () => ({\n  type: \"PAUSE_GAME\"\n});\n\nexport const resumeGame = () => ({\n  type: \"RESUME_GAME\"\n});\n\nexport const highlightSnake = snakeId => ({\n  type: \"HIGHLIGHT_SNAKE\",\n  snakeId\n});\n\nconst windowPostMessage = msg => {\n  // Uses postMessage API to send data to the parent frame\n  window.parent.postMessage(msg, \"*\");\n};\n\nexport const fetchFrames = () => {\n  return async (dispatch, getState) => {\n    const {\n      autoplay,\n      engine: engineUrl,\n      game: gameId,\n      turn\n    } = getState().engineOptions;\n\n    const gameTurn = parseInt(turn);\n\n    dispatch(requestFrames());\n\n    await streamAllFrames(engineUrl, gameId, (game, frame) => {\n      dispatch(setGameStatus(game.Game.Status));\n\n      // Workaround for bug where turn exluded on turn 0\n      frame.Turn = frame.Turn || 0;\n      dispatch(receiveFrame(game, frame));\n\n      // Workaround to render the first frame into the board\n      if (frame.Turn === 0) {\n        const frame = getState().frames[0];\n        windowPostMessage({ turn: frame.turn });\n        dispatch(setCurrentFrame(frame));\n\n        if (autoplay) {\n          dispatch(resumeGame());\n          dispatch(playFromFrame(frame));\n        }\n      }\n\n      // Only navigate to the specified frame if it is within the\n      // amount of frames available in the game\n      if (gameTurn && gameTurn <= getState().frames.length) {\n        const frame = getState().frames[gameTurn];\n        dispatch(setCurrentFrame(frame));\n      }\n    });\n  };\n};\n\nexport const playFromFrame = frame => {\n  return async (dispatch, getState) => {\n    const { frameRate } = getState().engineOptions;\n    const frames = getState().frames.slice(); // Don't modify in place\n    const frameIndex = frames.indexOf(frame);\n    const slicedFrames = frames.slice(frameIndex);\n\n    const ceiledFps = Math.ceil(frameRate || DEFAULT_FPS);\n    const delayMillis = 1000 / ceiledFps;\n\n    for (const frame of slicedFrames) {\n      if (getState().paused) return;\n      dispatch(setCurrentFrame(frame));\n      await delay(delayMillis);\n    }\n\n    const lastFrame = slicedFrames[slicedFrames.length - 1];\n    if (lastFrame.gameOver) {\n      if (!getState().paused) dispatch(gameOver());\n    } else {\n      dispatch(playFromFrame(lastFrame));\n    }\n  };\n};\n\nexport const reloadGame = () => {\n  return async (dispatch, getState) => {\n    const { frames, paused } = getState();\n    if (paused) {\n      const frame = getFrameByTurn(frames, 0);\n      dispatch(setCurrentFrame(frame));\n    }\n  };\n};\n\nexport const toggleGamePause = () => {\n  return async (dispatch, getState) => {\n    const { currentFrame, gameStatus, paused, engineOptions } = getState();\n\n    if (paused) {\n      if (gameStatus === \"stopped\") {\n        await fetchGameStart(engineOptions.engine, engineOptions.game);\n        dispatch(fetchFrames());\n      }\n\n      dispatch(resumeGame());\n      dispatch(playFromFrame(currentFrame));\n    } else {\n      windowPostMessage({ turn: currentFrame.turn + 1 });\n      dispatch(pauseGame());\n    }\n  };\n};\n\nexport const stepForwardFrame = () => {\n  return async (dispatch, getState) => {\n    const { currentFrame, frames } = getState();\n    const nextFrame = currentFrame.turn + 1;\n    const stepToFrame = getFrameByTurn(frames, nextFrame);\n    if (stepToFrame) {\n      windowPostMessage({ turn: stepToFrame.turn });\n      dispatch(setCurrentFrame(stepToFrame));\n    }\n  };\n};\n\nexport const stepBackwardFrame = () => {\n  return async (dispatch, getState) => {\n    const { currentFrame, frames } = getState();\n    const prevFrame = currentFrame.turn - 1;\n    const stepToFrame = getFrameByTurn(frames, prevFrame);\n    if (stepToFrame) {\n      windowPostMessage({ turn: stepToFrame.turn });\n      dispatch(setCurrentFrame(stepToFrame));\n    }\n  };\n};\n","import { connect } from \"react-redux\";\nimport { parseQueryString } from \"../utils/url\";\nimport Game from \"../components/game\";\nimport {\n  fetchFrames,\n  reloadGame,\n  toggleGamePause,\n  setEngineOptions,\n  stepForwardFrame,\n  stepBackwardFrame,\n  highlightSnake\n} from \"../actions\";\n\nconst options = parseQueryString(window.location.search);\n\nconst mapStateToProps = state => {\n  return {\n    options: options,\n    grid: state.grid,\n    paused: state.paused,\n    currentFrame: state.currentFrame,\n    frames: state.frames,\n    highlightedSnake: state.highlightedSnake,\n    gameStatus: state.gameStatus\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  setEngineOptions: options => dispatch(setEngineOptions(options)),\n  fetchFrames: () => dispatch(fetchFrames()),\n  reloadGame: () => dispatch(reloadGame()),\n  toggleGamePause: paused => dispatch(toggleGamePause(paused)),\n  stepForwardFrame: () => dispatch(stepForwardFrame()),\n  stepBackwardFrame: () => dispatch(stepBackwardFrame()),\n  highlightSnake: snakeId => dispatch(highlightSnake(snakeId))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Game);\n","import React from \"react\";\nimport { render } from \"react-dom\";\n// import { compose, createStore, applyMiddleware } from \"redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport rootReducer from \"./reducers\";\nimport App from \"./containers/app\";\nimport thunkMiddleware from \"redux-thunk\";\n\nconst initialState = {\n  options: null,\n  grid: [],\n  frames: [],\n  paused: true,\n  highlightedSnake: null\n};\nconst middleware = applyMiddleware(thunkMiddleware);\nconst store = createStore(rootReducer, initialState, middleware);\n// const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n// const store = createStore(\n//   rootReducer,\n//   initialState,\n//   composeEnhancers(applyMiddleware(thunkMiddleware))\n// );\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n","import { formatFrame } from \"../utils/game-state\";\n\nexport default (state = {}, action) => {\n  switch (action.type) {\n    case \"SET_ENGINE_OPTIONS\":\n      action.engineOptions.autoplay =\n        action.engineOptions.autoplay &&\n        action.engineOptions.autoplay === \"true\";\n      return { ...state, engineOptions: action.engineOptions };\n    case \"PAUSE_GAME\":\n      return { ...state, paused: true };\n    case \"GAME_OVER\":\n      return { ...state, paused: true };\n    case \"RESUME_GAME\":\n      return { ...state, paused: false };\n    case \"SET_GAME_STATUS\":\n      return { ...state, gameStatus: action.status };\n    case \"SET_CURRENT_FRAME\":\n      return { ...state, currentFrame: action.frame };\n    case \"RECEIVE_FRAME\":\n      const frame = formatFrame(action.frame);\n      return {\n        ...state,\n        grid: {\n          height: action.game.Game.Height,\n          width: action.game.Game.Width\n        },\n        frames: [...state.frames, frame] // Be smart: this consumes A LOT of memory...\n      };\n    case \"REQUEST_FRAMES\":\n      return { ...state };\n    case \"FETCH_FRAMES\":\n      return { ...state };\n    case \"HIGHLIGHT_SNAKE\":\n      postHighlightMessage(state, action);\n      return { ...state, highlightedSnake: action.snakeId };\n    default:\n      return { ...state };\n  }\n};\n\nfunction postHighlightMessage(state, action) {\n  if (!window.parent) {\n    return;\n  }\n  try {\n    window.parent.postMessage(\n      {\n        action: \"HIGHLIGHT_SNAKE\",\n        id: action.snakeId,\n        name: action.snakeId\n          ? state.currentFrame.snakes.find(s => s._id === action.snakeId).name\n          : null\n      },\n      \"*\"\n    );\n  } catch (e) {\n    console.error(e);\n  }\n}\n"],"sourceRoot":""}